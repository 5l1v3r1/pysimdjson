/* Generated by Cython 0.29.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "simdjson/cpuid.c",
            "simdjson/src/simdjson.cpp",
            "simdjson/src/simdjson.h"
        ],
        "include_dirs": [
            "simdjson",
            "./simdjson"
        ],
        "language": "c++",
        "name": "simdjson.csimdjson",
        "sources": [
            "simdjson/csimdjson.pyx"
        ]
    },
    "module_name": "simdjson.csimdjson"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_5"
#define CYTHON_HEX_VERSION 0x001D05F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__simdjson__csimdjson
#define __PYX_HAVE_API__simdjson__csimdjson
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "src/simdjson.h"
#include "src/simdjson.cpp"
#include "cpuid.c"
#include <string.h>
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "simdjson/csimdjson.pyx",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8simdjson_9csimdjson_Iterator;
struct __pyx_obj_8simdjson_9csimdjson_ParsedJson;

/* "simdjson/csimdjson.pyx":12
 * 
 * # State machine states for parsing item() query strings.
 * cdef enum:             # <<<<<<<<<<<<<<
 *     # Parsing an unquoted string.
 *     Q_UNQUOTED = 10
 */
enum  {
  __pyx_e_8simdjson_9csimdjson_Q_UNQUOTED = 10,
  __pyx_e_8simdjson_9csimdjson_Q_QUOTED = 20,
  __pyx_e_8simdjson_9csimdjson_Q_ESCAPE = 30,
  __pyx_e_8simdjson_9csimdjson_N_NONE = 0,
  __pyx_e_8simdjson_9csimdjson_N_GET = 10,
  __pyx_e_8simdjson_9csimdjson_N_ARRAY = 20,
  __pyx_e_8simdjson_9csimdjson_N_ARRAY_SINGLE = 30,
  __pyx_e_8simdjson_9csimdjson_N_ARRAY_SLICE = 40
};

/* "simdjson/csimdjson.pyx":83
 * 
 * 
 * cdef class Iterator:             # <<<<<<<<<<<<<<
 *     """A wrapper around the interal simdjson ParsedJson::iterator
 *     object.
 */
struct __pyx_obj_8simdjson_9csimdjson_Iterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *__pyx_vtab;
  ParsedJson::iterator *iter;
};


/* "simdjson/csimdjson.pyx":240
 * 
 * 
 * cdef class ParsedJson:             # <<<<<<<<<<<<<<
 *     """Low-level wrapper for simdjson.
 * 
 */
struct __pyx_obj_8simdjson_9csimdjson_ParsedJson {
  PyObject_HEAD
  struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *__pyx_vtab;
  ParsedJson pj;
};



/* "simdjson/csimdjson.pyx":83
 * 
 * 
 * cdef class Iterator:             # <<<<<<<<<<<<<<
 *     """A wrapper around the interal simdjson ParsedJson::iterator
 *     object.
 */

struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator {
  bool (*isOk)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*prev)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*next)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*down)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*up)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*move_to_key)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, char const *, int __pyx_skip_dispatch);
  bool (*move_forward)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  void (*to_start_scope)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  uint8_t (*get_type)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  size_t (*get_tape_location)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  size_t (*get_tape_length)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  size_t (*get_depth)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  size_t (*get_scope_type)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_object_or_array)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_object)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_array)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_string)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_integer)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  bool (*is_double)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  double (*get_double)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  int64_t (*get_integer)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
  PyObject *(*get_string)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *__pyx_vtabptr_8simdjson_9csimdjson_Iterator;


/* "simdjson/csimdjson.pyx":240
 * 
 * 
 * cdef class ParsedJson:             # <<<<<<<<<<<<<<
 *     """Low-level wrapper for simdjson.
 * 
 */

struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson {
  bool (*is_valid)(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *, int __pyx_skip_dispatch);
  PyObject *(*_items)(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *, struct __pyx_obj_8simdjson_9csimdjson_Iterator *, PyObject *);
};
static struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *__pyx_vtabptr_8simdjson_9csimdjson_ParsedJson;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* ByteArrayAppend.proto */
static CYTHON_INLINE int __Pyx_PyByteArray_Append(PyObject* bytearray, int value);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static bool __pyx_f_8simdjson_9csimdjson_8Iterator_isOk(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_prev(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_next(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_down(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_up(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_move_to_key(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, char const *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_move_forward(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_8simdjson_9csimdjson_8Iterator_to_start_scope(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static uint8_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_location(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_length(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_depth(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_scope_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_object_or_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_object(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_8simdjson_9csimdjson_8Iterator_get_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int64_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8simdjson_9csimdjson_8Iterator_get_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_8simdjson_9csimdjson_10ParsedJson_is_valid(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8simdjson_9csimdjson_10ParsedJson__items(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_iter, PyObject *__pyx_v_parsed_query); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'simdjson.csimdjson' */
static PyTypeObject *__pyx_ptype_8simdjson_9csimdjson_Iterator = 0;
static PyTypeObject *__pyx_ptype_8simdjson_9csimdjson_ParsedJson = 0;
static int __pyx_v_8simdjson_9csimdjson_DEFAULT_MAX_DEPTH;
static PyObject *__pyx_f_8simdjson_9csimdjson__to_obj(ParsedJson::iterator *); /*proto*/
static PyObject *__pyx_f_8simdjson_9csimdjson_parse_query(PyObject *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "simdjson.csimdjson"
extern int __pyx_module_is_main_simdjson__csimdjson;
int __pyx_module_is_main_simdjson__csimdjson = 0;

/* Implementation of 'simdjson.csimdjson' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_chr;
static const char __pyx_k_s[] = "s";
static const char __pyx_k__6[] = "";
static const char __pyx_k_pj[] = "pj";
static const char __pyx_k_up[] = "up";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_down[] = "down";
static const char __pyx_k_isOk[] = "isOk";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_prev[] = "prev";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_utf_7[] = "utf-7";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_to_obj[] = "to_obj";
static const char __pyx_k_Iterator[] = "Iterator";
static const char __pyx_k_get_type[] = "get_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_array[] = "is_array";
static const char __pyx_k_is_valid[] = "is_valid";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_get_depth[] = "get_depth";
static const char __pyx_k_is_double[] = "is_double";
static const char __pyx_k_is_object[] = "is_object";
static const char __pyx_k_is_string[] = "is_string";
static const char __pyx_k_max_depth[] = "max_depth";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ParsedJson[] = "ParsedJson";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_get_double[] = "get_double";
static const char __pyx_k_get_string[] = "get_string";
static const char __pyx_k_is_integer[] = "is_integer";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_get_integer[] = "get_integer";
static const char __pyx_k_move_to_key[] = "move_to_key";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_move_forward[] = "move_forward";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_get_scope_type[] = "get_scope_type";
static const char __pyx_k_to_start_scope[] = "to_start_scope";
static const char __pyx_k_JSONDecodeError[] = "JSONDecodeError";
static const char __pyx_k_get_tape_length[] = "get_tape_length";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_allocate_capacity[] = "allocate_capacity";
static const char __pyx_k_get_tape_location[] = "get_tape_location";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_is_object_or_array[] = "is_object_or_array";
static const char __pyx_k_simdjson_csimdjson[] = "simdjson.csimdjson";
static const char __pyx_k_Stray_in_query_string[] = "Stray ] in query string.";
static const char __pyx_k_Error_parsing_document[] = "Error parsing document";
static const char __pyx_k_simdjson_csimdjson_pyx[] = "simdjson/csimdjson.pyx";
static const char __pyx_k_Error_iterating_over_document[] = "Error iterating over document";
static const char __pyx_k_Do_not_know_how_to_handle_0_r_in[] = "Do not know how to handle {0!r} in array subscript";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_pj_cannot_be_converted_to_a[] = "self.pj cannot be converted to a Python object for pickling";
static const char __pyx_k_simdjson_requires_AVX2_support_h[] = "simdjson requires AVX2 support, however it has not been enabled by your operating system.";
static const char __pyx_k_simdjson_requires_AVX2_support_w[] = "simdjson requires AVX2 support, which is not provided by your processor.";
static PyObject *__pyx_kp_s_Do_not_know_how_to_handle_0_r_in;
static PyObject *__pyx_kp_s_Error_iterating_over_document;
static PyObject *__pyx_kp_s_Error_parsing_document;
static PyObject *__pyx_n_s_Iterator;
static PyObject *__pyx_n_s_JSONDecodeError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_ParsedJson;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Stray_in_query_string;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_b__6;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_n_s_allocate_capacity;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_down;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_depth;
static PyObject *__pyx_n_s_get_double;
static PyObject *__pyx_n_s_get_integer;
static PyObject *__pyx_n_s_get_scope_type;
static PyObject *__pyx_n_s_get_string;
static PyObject *__pyx_n_s_get_tape_length;
static PyObject *__pyx_n_s_get_tape_location;
static PyObject *__pyx_n_s_get_type;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_isOk;
static PyObject *__pyx_n_s_is_array;
static PyObject *__pyx_n_s_is_double;
static PyObject *__pyx_n_s_is_integer;
static PyObject *__pyx_n_s_is_object;
static PyObject *__pyx_n_s_is_object_or_array;
static PyObject *__pyx_n_s_is_string;
static PyObject *__pyx_n_s_is_valid;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_depth;
static PyObject *__pyx_n_s_move_forward;
static PyObject *__pyx_n_s_move_to_key;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_parse;
static PyObject *__pyx_n_s_pj;
static PyObject *__pyx_n_s_prev;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_self_pj_cannot_be_converted_to_a;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_simdjson_csimdjson;
static PyObject *__pyx_kp_s_simdjson_csimdjson_pyx;
static PyObject *__pyx_kp_s_simdjson_requires_AVX2_support_h;
static PyObject *__pyx_kp_s_simdjson_requires_AVX2_support_w;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_obj;
static PyObject *__pyx_n_s_to_start_scope;
static PyObject *__pyx_n_s_up;
static PyObject *__pyx_kp_s_utf_7;
static PyObject *__pyx_kp_s_utf_8;
static int __pyx_pf_8simdjson_9csimdjson_8Iterator___cinit__(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_pj); /* proto */
static void __pyx_pf_8simdjson_9csimdjson_8Iterator_2__dealloc__(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_4isOk(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_6prev(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_8next(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_10down(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_12up(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_14move_to_key(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, char const *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_16move_forward(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_18to_start_scope(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_20get_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_22get_tape_location(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_24get_tape_length(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_26get_depth(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_28get_scope_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_30is_object_or_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_32is_object(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_34is_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_36is_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_38is_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_40is_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_42get_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_44get_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_46get_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_48to_obj(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8simdjson_9csimdjson_10ParsedJson___init__(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_2allocate_capacity(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_max_depth); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_4parse(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_6to_obj(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_8items(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_query); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_10is_valid(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_8simdjson_9csimdjson_2parse_query(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_query); /* proto */
static PyObject *__pyx_tp_new_8simdjson_9csimdjson_Iterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8simdjson_9csimdjson_ParsedJson(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_k__5;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_codeobj__12;
/* Late includes */

/* "simdjson/csimdjson.pyx":32
 * 
 * 
 * cdef object _to_obj(CParsedJson.iterator* iter):             # <<<<<<<<<<<<<<
 *     # This is going to be by far the slowest part of this, as the cost of
 *     # creating python objects is quite high.
 */

static PyObject *__pyx_f_8simdjson_9csimdjson__to_obj(ParsedJson::iterator *__pyx_v_iter) {
  char __pyx_v_t;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char const *__pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_to_obj", 0);

  /* "simdjson/csimdjson.pyx":38
 *     # overhead of calling this 13 million times while processing sandiego.json
 *     # can't be ignored.
 *     cdef char t = <char>iter.get_type()             # <<<<<<<<<<<<<<
 *     cdef unicode k
 *     cdef dict d
 */
  __pyx_v_t = ((char)__pyx_v_iter->get_type());

  /* "simdjson/csimdjson.pyx":43
 *     cdef list l
 * 
 *     if t == '[':             # <<<<<<<<<<<<<<
 *         l = []
 *         if iter.down():
 */
  switch (__pyx_v_t) {
    case '[':

    /* "simdjson/csimdjson.pyx":44
 * 
 *     if t == '[':
 *         l = []             # <<<<<<<<<<<<<<
 *         if iter.down():
 *             while True:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_l = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "simdjson/csimdjson.pyx":45
 *     if t == '[':
 *         l = []
 *         if iter.down():             # <<<<<<<<<<<<<<
 *             while True:
 *                 v = _to_obj(iter)
 */
    __pyx_t_2 = (__pyx_v_iter->down() != 0);
    if (__pyx_t_2) {

      /* "simdjson/csimdjson.pyx":46
 *         l = []
 *         if iter.down():
 *             while True:             # <<<<<<<<<<<<<<
 *                 v = _to_obj(iter)
 *                 l.append(v)
 */
      while (1) {

        /* "simdjson/csimdjson.pyx":47
 *         if iter.down():
 *             while True:
 *                 v = _to_obj(iter)             # <<<<<<<<<<<<<<
 *                 l.append(v)
 * 
 */
        __pyx_t_1 = __pyx_f_8simdjson_9csimdjson__to_obj(__pyx_v_iter); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "simdjson/csimdjson.pyx":48
 *             while True:
 *                 v = _to_obj(iter)
 *                 l.append(v)             # <<<<<<<<<<<<<<
 * 
 *                 if not iter.next():
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_l, __pyx_v_v); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 48, __pyx_L1_error)

        /* "simdjson/csimdjson.pyx":50
 *                 l.append(v)
 * 
 *                 if not iter.next():             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_t_2 = ((!(__pyx_v_iter->next() != 0)) != 0);
        if (__pyx_t_2) {

          /* "simdjson/csimdjson.pyx":51
 * 
 *                 if not iter.next():
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             iter.up()
 */
          goto __pyx_L5_break;

          /* "simdjson/csimdjson.pyx":50
 *                 l.append(v)
 * 
 *                 if not iter.next():             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        }
      }
      __pyx_L5_break:;

      /* "simdjson/csimdjson.pyx":53
 *                     break
 * 
 *             iter.up()             # <<<<<<<<<<<<<<
 *         return l
 *     elif t == '{':
 */
      (void)(__pyx_v_iter->up());

      /* "simdjson/csimdjson.pyx":45
 *     if t == '[':
 *         l = []
 *         if iter.down():             # <<<<<<<<<<<<<<
 *             while True:
 *                 v = _to_obj(iter)
 */
    }

    /* "simdjson/csimdjson.pyx":54
 * 
 *             iter.up()
 *         return l             # <<<<<<<<<<<<<<
 *     elif t == '{':
 *         d = {}
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_l);
    __pyx_r = __pyx_v_l;
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":43
 *     cdef list l
 * 
 *     if t == '[':             # <<<<<<<<<<<<<<
 *         l = []
 *         if iter.down():
 */
    break;
    case '{':

      /* "simdjson/csimdjson.pyx":56
 *         return l
 *     elif t == '{':
 *         d = {}             # <<<<<<<<<<<<<<
 *         if iter.down():
 *             while True:
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_d = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "simdjson/csimdjson.pyx":57
 *     elif t == '{':
 *         d = {}
 *         if iter.down():             # <<<<<<<<<<<<<<
 *             while True:
 *                 k = iter.get_string().decode('utf-8')
 */
      __pyx_t_2 = (__pyx_v_iter->down() != 0);
      if (__pyx_t_2) {

        /* "simdjson/csimdjson.pyx":58
 *         d = {}
 *         if iter.down():
 *             while True:             # <<<<<<<<<<<<<<
 *                 k = iter.get_string().decode('utf-8')
 *                 iter.next()
 */
        while (1) {

          /* "simdjson/csimdjson.pyx":59
 *         if iter.down():
 *             while True:
 *                 k = iter.get_string().decode('utf-8')             # <<<<<<<<<<<<<<
 *                 iter.next()
 *                 v = _to_obj(iter)
 */
          __pyx_t_4 = __pyx_v_iter->get_string();
          __pyx_t_1 = __Pyx_decode_c_string(__pyx_t_4, 0, strlen(__pyx_t_4), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 59, __pyx_L1_error)
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_k, ((PyObject*)__pyx_t_1));
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":60
 *             while True:
 *                 k = iter.get_string().decode('utf-8')
 *                 iter.next()             # <<<<<<<<<<<<<<
 *                 v = _to_obj(iter)
 *                 PyDict_SetItem(d, k, v)
 */
          (void)(__pyx_v_iter->next());

          /* "simdjson/csimdjson.pyx":61
 *                 k = iter.get_string().decode('utf-8')
 *                 iter.next()
 *                 v = _to_obj(iter)             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(d, k, v)
 * 
 */
          __pyx_t_1 = __pyx_f_8simdjson_9csimdjson__to_obj(__pyx_v_iter); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":62
 *                 iter.next()
 *                 v = _to_obj(iter)
 *                 PyDict_SetItem(d, k, v)             # <<<<<<<<<<<<<<
 * 
 *                 if not iter.next():
 */
          __pyx_t_5 = PyDict_SetItem(__pyx_v_d, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 62, __pyx_L1_error)

          /* "simdjson/csimdjson.pyx":64
 *                 PyDict_SetItem(d, k, v)
 * 
 *                 if not iter.next():             # <<<<<<<<<<<<<<
 *                     break
 *             iter.up()
 */
          __pyx_t_2 = ((!(__pyx_v_iter->next() != 0)) != 0);
          if (__pyx_t_2) {

            /* "simdjson/csimdjson.pyx":65
 * 
 *                 if not iter.next():
 *                     break             # <<<<<<<<<<<<<<
 *             iter.up()
 *         return d
 */
            goto __pyx_L9_break;

            /* "simdjson/csimdjson.pyx":64
 *                 PyDict_SetItem(d, k, v)
 * 
 *                 if not iter.next():             # <<<<<<<<<<<<<<
 *                     break
 *             iter.up()
 */
          }
        }
        __pyx_L9_break:;

        /* "simdjson/csimdjson.pyx":66
 *                 if not iter.next():
 *                     break
 *             iter.up()             # <<<<<<<<<<<<<<
 *         return d
 *     elif t == 'd':
 */
        (void)(__pyx_v_iter->up());

        /* "simdjson/csimdjson.pyx":57
 *     elif t == '{':
 *         d = {}
 *         if iter.down():             # <<<<<<<<<<<<<<
 *             while True:
 *                 k = iter.get_string().decode('utf-8')
 */
      }

      /* "simdjson/csimdjson.pyx":67
 *                     break
 *             iter.up()
 *         return d             # <<<<<<<<<<<<<<
 *     elif t == 'd':
 *         return iter.get_double()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_d);
      __pyx_r = __pyx_v_d;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":55
 *             iter.up()
 *         return l
 *     elif t == '{':             # <<<<<<<<<<<<<<
 *         d = {}
 *         if iter.down():
 */
      break;
      case 'd':

      /* "simdjson/csimdjson.pyx":69
 *         return d
 *     elif t == 'd':
 *         return iter.get_double()             # <<<<<<<<<<<<<<
 *     elif t == 'l':
 *         return iter.get_integer()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_iter->get_double()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":68
 *             iter.up()
 *         return d
 *     elif t == 'd':             # <<<<<<<<<<<<<<
 *         return iter.get_double()
 *     elif t == 'l':
 */
      break;
      case 'l':

      /* "simdjson/csimdjson.pyx":71
 *         return iter.get_double()
 *     elif t == 'l':
 *         return iter.get_integer()             # <<<<<<<<<<<<<<
 *     elif t == '"':
 *         k = iter.get_string().decode('utf-8')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_iter->get_integer()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":70
 *     elif t == 'd':
 *         return iter.get_double()
 *     elif t == 'l':             # <<<<<<<<<<<<<<
 *         return iter.get_integer()
 *     elif t == '"':
 */
      break;
      case '"':

      /* "simdjson/csimdjson.pyx":73
 *         return iter.get_integer()
 *     elif t == '"':
 *         k = iter.get_string().decode('utf-8')             # <<<<<<<<<<<<<<
 *         return k
 *     elif t == 't':
 */
      __pyx_t_4 = __pyx_v_iter->get_string();
      __pyx_t_1 = __Pyx_decode_c_string(__pyx_t_4, 0, strlen(__pyx_t_4), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 73, __pyx_L1_error)
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_k = ((PyObject*)__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "simdjson/csimdjson.pyx":74
 *     elif t == '"':
 *         k = iter.get_string().decode('utf-8')
 *         return k             # <<<<<<<<<<<<<<
 *     elif t == 't':
 *         return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_k);
      __pyx_r = __pyx_v_k;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":72
 *     elif t == 'l':
 *         return iter.get_integer()
 *     elif t == '"':             # <<<<<<<<<<<<<<
 *         k = iter.get_string().decode('utf-8')
 *         return k
 */
      break;
      case 't':

      /* "simdjson/csimdjson.pyx":76
 *         return k
 *     elif t == 't':
 *         return True             # <<<<<<<<<<<<<<
 *     elif t == 'f':
 *         return False
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":75
 *         k = iter.get_string().decode('utf-8')
 *         return k
 *     elif t == 't':             # <<<<<<<<<<<<<<
 *         return True
 *     elif t == 'f':
 */
      break;
      case 'f':

      /* "simdjson/csimdjson.pyx":78
 *         return True
 *     elif t == 'f':
 *         return False             # <<<<<<<<<<<<<<
 *     elif t == 'n':
 *         return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":77
 *     elif t == 't':
 *         return True
 *     elif t == 'f':             # <<<<<<<<<<<<<<
 *         return False
 *     elif t == 'n':
 */
      break;
      case 'n':

      /* "simdjson/csimdjson.pyx":80
 *         return False
 *     elif t == 'n':
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":79
 *     elif t == 'f':
 *         return False
 *     elif t == 'n':             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      break;
      default: break;
    }

    /* "simdjson/csimdjson.pyx":32
 * 
 * 
 * cdef object _to_obj(CParsedJson.iterator* iter):             # <<<<<<<<<<<<<<
 *     # This is going to be by far the slowest part of this, as the cost of
 *     # creating python objects is quite high.
 */

    /* function exit code */
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson._to_obj", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_XDECREF(__pyx_v_k);
    __Pyx_XDECREF(__pyx_v_d);
    __Pyx_XDECREF(__pyx_v_l);
    __Pyx_XDECREF(__pyx_v_v);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":105
 *     cdef CParsedJson.iterator* iter
 * 
 *     def __cinit__(self, ParsedJson pj):             # <<<<<<<<<<<<<<
 *         self.iter = new CParsedJson.iterator(pj.pj)
 * 
 */

  /* Python wrapper */
  static int __pyx_pw_8simdjson_9csimdjson_8Iterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
  static int __pyx_pw_8simdjson_9csimdjson_8Iterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
    struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_pj = 0;
    int __pyx_r;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
    {
      static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pj,0};
      PyObject* values[1] = {0};
      if (unlikely(__pyx_kwds)) {
        Py_ssize_t kw_args;
        const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
        switch (pos_args) {
          case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
          case  0: break;
          default: goto __pyx_L5_argtuple_error;
        }
        kw_args = PyDict_Size(__pyx_kwds);
        switch (pos_args) {
          case  0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pj)) != 0)) kw_args--;
          else goto __pyx_L5_argtuple_error;
        }
        if (unlikely(kw_args > 0)) {
          if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 105, __pyx_L3_error)
        }
      } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
        goto __pyx_L5_argtuple_error;
      } else {
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      }
      __pyx_v_pj = ((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)values[0]);
    }
    goto __pyx_L4_argument_unpacking_done;
    __pyx_L5_argtuple_error:;
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 105, __pyx_L3_error)
    __pyx_L3_error:;
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __Pyx_RefNannyFinishContext();
    return -1;
    __pyx_L4_argument_unpacking_done:;
    if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pj), __pyx_ptype_8simdjson_9csimdjson_ParsedJson, 1, "pj", 0))) __PYX_ERR(1, 105, __pyx_L1_error)
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator___cinit__(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self), __pyx_v_pj);

    /* function exit code */
    goto __pyx_L0;
    __pyx_L1_error:;
    __pyx_r = -1;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static int __pyx_pf_8simdjson_9csimdjson_8Iterator___cinit__(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_pj) {
    int __pyx_r;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("__cinit__", 0);

    /* "simdjson/csimdjson.pyx":106
 * 
 *     def __cinit__(self, ParsedJson pj):
 *         self.iter = new CParsedJson.iterator(pj.pj)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->iter = new ParsedJson::iterator(__pyx_v_pj->pj);

    /* "simdjson/csimdjson.pyx":105
 *     cdef CParsedJson.iterator* iter
 * 
 *     def __cinit__(self, ParsedJson pj):             # <<<<<<<<<<<<<<
 *         self.iter = new CParsedJson.iterator(pj.pj)
 * 
 */

    /* function exit code */
    __pyx_r = 0;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":108
 *         self.iter = new CParsedJson.iterator(pj.pj)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.iter
 * 
 */

  /* Python wrapper */
  static void __pyx_pw_8simdjson_9csimdjson_8Iterator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
  static void __pyx_pw_8simdjson_9csimdjson_8Iterator_3__dealloc__(PyObject *__pyx_v_self) {
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
    __pyx_pf_8simdjson_9csimdjson_8Iterator_2__dealloc__(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
  }

  static void __pyx_pf_8simdjson_9csimdjson_8Iterator_2__dealloc__(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("__dealloc__", 0);

    /* "simdjson/csimdjson.pyx":109
 * 
 *     def __dealloc__(self):
 *         del self.iter             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool isOk(self):
 */
    delete __pyx_v_self->iter;

    /* "simdjson/csimdjson.pyx":108
 *         self.iter = new CParsedJson.iterator(pj.pj)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.iter
 * 
 */

    /* function exit code */
    __Pyx_RefNannyFinishContext();
  }

  /* "simdjson/csimdjson.pyx":111
 *         del self.iter
 * 
 *     cpdef bool isOk(self):             # <<<<<<<<<<<<<<
 *         """True if the internal state of the iterator is valid."""
 *         return self.iter.isOk()
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_5isOk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_isOk(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("isOk", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isOk); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_5isOk)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 111, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":113
 *     cpdef bool isOk(self):
 *         """True if the internal state of the iterator is valid."""
 *         return self.iter.isOk()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool prev(self):
 */
    __pyx_r = __pyx_v_self->iter->isOk();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":111
 *         del self.iter
 * 
 *     cpdef bool isOk(self):             # <<<<<<<<<<<<<<
 *         """True if the internal state of the iterator is valid."""
 *         return self.iter.isOk()
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.isOk", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_5isOk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_4isOk[] = "Iterator.isOk(self) -> bool\nTrue if the internal state of the iterator is valid.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_5isOk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("isOk (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_4isOk(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_4isOk(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("isOk", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_isOk(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.isOk", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":115
 *         return self.iter.isOk()
 * 
 *     cpdef bool prev(self):             # <<<<<<<<<<<<<<
 *         """Move to the previous element in the document. This will return False
 *         if already at the start of the current scope."""
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_7prev(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_prev(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("prev", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prev); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_7prev)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 115, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 115, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":118
 *         """Move to the previous element in the document. This will return False
 *         if already at the start of the current scope."""
 *         return self.iter.prev()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool next(self):
 */
    __pyx_r = __pyx_v_self->iter->prev();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":115
 *         return self.iter.isOk()
 * 
 *     cpdef bool prev(self):             # <<<<<<<<<<<<<<
 *         """Move to the previous element in the document. This will return False
 *         if already at the start of the current scope."""
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.prev", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_7prev(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_6prev[] = "Iterator.prev(self) -> bool\nMove to the previous element in the document. This will return False\n        if already at the start of the current scope.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_7prev(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("prev (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_6prev(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_6prev(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("prev", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_prev(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":120
 *         return self.iter.prev()
 * 
 *     cpdef bool next(self):             # <<<<<<<<<<<<<<
 *         """Move to the next element in the document. This will return False if
 *         the end of the current scope has been reached."""
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_9next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_next(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("next", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 120, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_9next)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 120, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":123
 *         """Move to the next element in the document. This will return False if
 *         the end of the current scope has been reached."""
 *         return self.iter.next()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool down(self):
 */
    __pyx_r = __pyx_v_self->iter->next();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":120
 *         return self.iter.prev()
 * 
 *     cpdef bool next(self):             # <<<<<<<<<<<<<<
 *         """Move to the next element in the document. This will return False if
 *         the end of the current scope has been reached."""
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.next", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_9next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_8next[] = "Iterator.next(self) -> bool\nMove to the next element in the document. This will return False if\n        the end of the current scope has been reached.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_9next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("next (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_8next(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_8next(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("next", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_next(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":125
 *         return self.iter.next()
 * 
 *     cpdef bool down(self):             # <<<<<<<<<<<<<<
 *         """Enter the current scope and move down a level in the document."""
 *         return self.iter.down()
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_11down(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_down(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("down", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_down); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_11down)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 125, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":127
 *     cpdef bool down(self):
 *         """Enter the current scope and move down a level in the document."""
 *         return self.iter.down()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool up(self):
 */
    __pyx_r = __pyx_v_self->iter->down();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":125
 *         return self.iter.next()
 * 
 *     cpdef bool down(self):             # <<<<<<<<<<<<<<
 *         """Enter the current scope and move down a level in the document."""
 *         return self.iter.down()
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.down", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_11down(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_10down[] = "Iterator.down(self) -> bool\nEnter the current scope and move down a level in the document.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_11down(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("down (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_10down(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_10down(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("down", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_down(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.down", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":129
 *         return self.iter.down()
 * 
 *     cpdef bool up(self):             # <<<<<<<<<<<<<<
 *         """Exit the current scope and move up a level in the document."""
 *         return self.iter.up()
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_13up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_up(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("up", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_13up)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 129, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 129, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":131
 *     cpdef bool up(self):
 *         """Exit the current scope and move up a level in the document."""
 *         return self.iter.up()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool move_to_key(self, const char* key):
 */
    __pyx_r = __pyx_v_self->iter->up();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":129
 *         return self.iter.down()
 * 
 *     cpdef bool up(self):             # <<<<<<<<<<<<<<
 *         """Exit the current scope and move up a level in the document."""
 *         return self.iter.up()
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.up", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_13up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_12up[] = "Iterator.up(self) -> bool\nExit the current scope and move up a level in the document.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_13up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("up (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_12up(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_12up(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("up", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_up(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.up", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":133
 *         return self.iter.up()
 * 
 *     cpdef bool move_to_key(self, const char* key):             # <<<<<<<<<<<<<<
 *         """Move to the given `key` within the current scope. Returns False if
 *         the key was not found.
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_15move_to_key(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_move_to_key(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, char const *__pyx_v_key, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    PyObject *__pyx_t_5 = NULL;
    bool __pyx_t_6;
    __Pyx_RefNannySetupContext("move_to_key", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_move_to_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_15move_to_key)) {
          __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 133, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 133, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_6;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":137
 *         the key was not found.
 *         """
 *         return self.iter.move_to_key(key)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool move_forward(self):
 */
    __pyx_r = __pyx_v_self->iter->move_to_key(__pyx_v_key);
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":133
 *         return self.iter.up()
 * 
 *     cpdef bool move_to_key(self, const char* key):             # <<<<<<<<<<<<<<
 *         """Move to the given `key` within the current scope. Returns False if
 *         the key was not found.
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.move_to_key", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_15move_to_key(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_14move_to_key[] = "Iterator.move_to_key(self, const char *key) -> bool\nMove to the given `key` within the current scope. Returns False if\n        the key was not found.\n        ";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_15move_to_key(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
    char const *__pyx_v_key;
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("move_to_key (wrapper)", 0);
    assert(__pyx_arg_key); {
      __pyx_v_key = __Pyx_PyObject_AsString(__pyx_arg_key); if (unlikely((!__pyx_v_key) && PyErr_Occurred())) __PYX_ERR(1, 133, __pyx_L3_error)
    }
    goto __pyx_L4_argument_unpacking_done;
    __pyx_L3_error:;
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.move_to_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __Pyx_RefNannyFinishContext();
    return NULL;
    __pyx_L4_argument_unpacking_done:;
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_14move_to_key(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self), ((char const *)__pyx_v_key));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_14move_to_key(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, char const *__pyx_v_key) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("move_to_key", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_move_to_key(__pyx_v_self, __pyx_v_key, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.move_to_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":139
 *         return self.iter.move_to_key(key)
 * 
 *     cpdef bool move_forward(self):             # <<<<<<<<<<<<<<
 *         """Move forward along the tape in document order. This will enter and
 *         exit scopes automatically, so it can be used to traverse an entire
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_17move_forward(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static bool __pyx_f_8simdjson_9csimdjson_8Iterator_move_forward(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    bool __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    bool __pyx_t_5;
    __Pyx_RefNannySetupContext("move_forward", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_move_forward); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_17move_forward)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 139, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 139, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":144
 *         document.
 *         """
 *         return self.iter.move_forward()             # <<<<<<<<<<<<<<
 * 
 *     cpdef void to_start_scope(self):
 */
    __pyx_r = __pyx_v_self->iter->move_forward();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":139
 *         return self.iter.move_to_key(key)
 * 
 *     cpdef bool move_forward(self):             # <<<<<<<<<<<<<<
 *         """Move forward along the tape in document order. This will enter and
 *         exit scopes automatically, so it can be used to traverse an entire
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.move_forward", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_17move_forward(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_16move_forward[] = "Iterator.move_forward(self) -> bool\nMove forward along the tape in document order. This will enter and\n        exit scopes automatically, so it can be used to traverse an entire\n        document.\n        ";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_17move_forward(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("move_forward (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_16move_forward(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_16move_forward(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("move_forward", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_move_forward(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.move_forward", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":146
 *         return self.iter.move_forward()
 * 
 *     cpdef void to_start_scope(self):             # <<<<<<<<<<<<<<
 *         """Move to the start of the current scope."""
 *         self.iter.to_start_scope()
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_19to_start_scope(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static void __pyx_f_8simdjson_9csimdjson_8Iterator_to_start_scope(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    __Pyx_RefNannySetupContext("to_start_scope", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_start_scope); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_19to_start_scope)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":148
 *     cpdef void to_start_scope(self):
 *         """Move to the start of the current scope."""
 *         self.iter.to_start_scope()             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_self->iter->to_start_scope();

    /* "simdjson/csimdjson.pyx":149
 *         """Move to the start of the current scope."""
 *         self.iter.to_start_scope()
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint8_t get_type(self):
 */
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":146
 *         return self.iter.move_forward()
 * 
 *     cpdef void to_start_scope(self):             # <<<<<<<<<<<<<<
 *         """Move to the start of the current scope."""
 *         self.iter.to_start_scope()
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.to_start_scope", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_19to_start_scope(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_18to_start_scope[] = "Iterator.to_start_scope(self) -> void\nMove to the start of the current scope.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_19to_start_scope(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("to_start_scope (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_18to_start_scope(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_18to_start_scope(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("to_start_scope", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_f_8simdjson_9csimdjson_8Iterator_to_start_scope(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.to_start_scope", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":151
 *         return
 * 
 *     cpdef uint8_t get_type(self):             # <<<<<<<<<<<<<<
 *         """The type of the current element the iterator is pointing to. This
 *         can be one of `"{}[]tfnrl`."""
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_21get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static uint8_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    uint8_t __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    uint8_t __pyx_t_5;
    __Pyx_RefNannySetupContext("get_type", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_21get_type)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyInt_As_uint8_t(__pyx_t_2); if (unlikely((__pyx_t_5 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":154
 *         """The type of the current element the iterator is pointing to. This
 *         can be one of `"{}[]tfnrl`."""
 *         return self.iter.get_type()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t get_tape_location(self):
 */
    __pyx_r = __pyx_v_self->iter->get_type();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":151
 *         return
 * 
 *     cpdef uint8_t get_type(self):             # <<<<<<<<<<<<<<
 *         """The type of the current element the iterator is pointing to. This
 *         can be one of `"{}[]tfnrl`."""
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_21get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_20get_type[] = "Iterator.get_type(self) -> uint8_t\nThe type of the current element the iterator is pointing to. This\n        can be one of `\"{}[]tfnrl`.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_21get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_20get_type(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_20get_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("get_type", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_type(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":156
 *         return self.iter.get_type()
 * 
 *     cpdef size_t get_tape_location(self):             # <<<<<<<<<<<<<<
 *         """The iterator's current location within the underlying tape
 *         structure."""
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_23get_tape_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_location(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    size_t __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    size_t __pyx_t_5;
    __Pyx_RefNannySetupContext("get_tape_location", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tape_location); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_23get_tape_location)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":159
 *         """The iterator's current location within the underlying tape
 *         structure."""
 *         return self.iter.get_tape_location()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t get_tape_length(self):
 */
    __pyx_r = __pyx_v_self->iter->get_tape_location();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":156
 *         return self.iter.get_type()
 * 
 *     cpdef size_t get_tape_location(self):             # <<<<<<<<<<<<<<
 *         """The iterator's current location within the underlying tape
 *         structure."""
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_tape_location", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_23get_tape_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_22get_tape_location[] = "Iterator.get_tape_location(self) -> size_t\nThe iterator's current location within the underlying tape\n        structure.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_23get_tape_location(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("get_tape_location (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_22get_tape_location(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_22get_tape_location(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("get_tape_location", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_location(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_tape_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":161
 *         return self.iter.get_tape_location()
 * 
 *     cpdef size_t get_tape_length(self):             # <<<<<<<<<<<<<<
 *         """The total length of the underlying tape structure.
 * 
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_25get_tape_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_length(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    size_t __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    size_t __pyx_t_5;
    __Pyx_RefNannySetupContext("get_tape_length", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tape_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_25get_tape_length)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":167
 *         document. Some elements consume more than a single entry on the tape.
 *         """
 *         return self.iter.get_tape_length()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t get_depth(self):
 */
    __pyx_r = __pyx_v_self->iter->get_tape_length();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":161
 *         return self.iter.get_tape_location()
 * 
 *     cpdef size_t get_tape_length(self):             # <<<<<<<<<<<<<<
 *         """The total length of the underlying tape structure.
 * 
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_tape_length", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_25get_tape_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_24get_tape_length[] = "Iterator.get_tape_length(self) -> size_t\nThe total length of the underlying tape structure.\n\n        The length of the tape is _not_ the same as the # of elements in the\n        document. Some elements consume more than a single entry on the tape.\n        ";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_25get_tape_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("get_tape_length (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_24get_tape_length(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_24get_tape_length(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("get_tape_length", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_length(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_tape_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":169
 *         return self.iter.get_tape_length()
 * 
 *     cpdef size_t get_depth(self):             # <<<<<<<<<<<<<<
 *         """The current depth of the iterator in the tree."""
 *         return self.iter.get_depth()
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_27get_depth(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_depth(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    size_t __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    size_t __pyx_t_5;
    __Pyx_RefNannySetupContext("get_depth", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_27get_depth)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 169, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":171
 *     cpdef size_t get_depth(self):
 *         """The current depth of the iterator in the tree."""
 *         return self.iter.get_depth()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t get_scope_type(self):
 */
    __pyx_r = __pyx_v_self->iter->get_depth();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":169
 *         return self.iter.get_tape_length()
 * 
 *     cpdef size_t get_depth(self):             # <<<<<<<<<<<<<<
 *         """The current depth of the iterator in the tree."""
 *         return self.iter.get_depth()
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_depth", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_27get_depth(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_26get_depth[] = "Iterator.get_depth(self) -> size_t\nThe current depth of the iterator in the tree.";
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_27get_depth(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
    PyObject *__pyx_r = 0;
    __Pyx_RefNannyDeclarations
    __Pyx_RefNannySetupContext("get_depth (wrapper)", 0);
    __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_26get_depth(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

    /* function exit code */
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_26get_depth(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
    PyObject *__pyx_r = NULL;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    __Pyx_RefNannySetupContext("get_depth", 0);
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_depth(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_depth", __pyx_clineno, __pyx_lineno, __pyx_filename);
    __pyx_r = NULL;
    __pyx_L0:;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* "simdjson/csimdjson.pyx":173
 *         return self.iter.get_depth()
 * 
 *     cpdef size_t get_scope_type(self):             # <<<<<<<<<<<<<<
 *         """Like :func:`~Iterator.get_type()`, except it returns the type of the
 *         containing scope. For example, given a state like this:
 */

  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_29get_scope_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static size_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_scope_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
    size_t __pyx_r;
    __Pyx_RefNannyDeclarations
    PyObject *__pyx_t_1 = NULL;
    PyObject *__pyx_t_2 = NULL;
    PyObject *__pyx_t_3 = NULL;
    PyObject *__pyx_t_4 = NULL;
    size_t __pyx_t_5;
    __Pyx_RefNannySetupContext("get_scope_type", 0);
    /* Check if called by wrapper */
    if (unlikely(__pyx_skip_dispatch)) ;
    /* Check if overridden in Python */
    else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
        PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        #endif
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_scope_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_29get_scope_type)) {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_r = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;
        }
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
        __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
        if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
          __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        }
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      }
      #endif
    }

    /* "simdjson/csimdjson.pyx":186
 *             return `{`, as it is contained within an object/dict.
 *         """
 *         return self.iter.get_scope_type()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_object_or_array(self):
 */
    __pyx_r = __pyx_v_self->iter->get_scope_type();
    goto __pyx_L0;

    /* "simdjson/csimdjson.pyx":173
 *         return self.iter.get_depth()
 * 
 *     cpdef size_t get_scope_type(self):             # <<<<<<<<<<<<<<
 *         """Like :func:`~Iterator.get_type()`, except it returns the type of the
 *         containing scope. For example, given a state like this:
 */

    /* function exit code */
    __pyx_L1_error:;
    __Pyx_XDECREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4);
    __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_scope_type", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
    __pyx_r = 0;
    __pyx_L0:;
    __Pyx_RefNannyFinishContext();
    return __pyx_r;
  }

  /* Python wrapper */
  static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_29get_scope_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
  static char __pyx_doc_8simdjson_9csimdjson_8Iterator_28get_scope_type[] = "Iterator.get_scope_type(self) -> size_t\nLike :func:`~Iterator.get_type()`, except it returns the type of the\n        containing scope. For example, given a state like this:\n\n            .. code-block:: json\n\n                {\n                    \"hello\": \"world\"\n                }\n\n            ... and the iterator is currently on \"world\", this method would\n            return `{`, as it is contained within an object/dict.\n        ";
    static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_29get_scope_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
      PyObject *__pyx_r = 0;
      __Pyx_RefNannyDeclarations
      __Pyx_RefNannySetupContext("get_scope_type (wrapper)", 0);
      __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_28get_scope_type(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

      /* function exit code */
      __Pyx_RefNannyFinishContext();
      return __pyx_r;
    }

    static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_28get_scope_type(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
      PyObject *__pyx_r = NULL;
      __Pyx_RefNannyDeclarations
      PyObject *__pyx_t_1 = NULL;
      __Pyx_RefNannySetupContext("get_scope_type", 0);
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_scope_type(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* function exit code */
      __pyx_L1_error:;
      __Pyx_XDECREF(__pyx_t_1);
      __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_scope_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      return __pyx_r;
    }

    /* "simdjson/csimdjson.pyx":188
 *         return self.iter.get_scope_type()
 * 
 *     cpdef bool is_object_or_array(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an object/dict or an array (elements
 *         for which :func:`~Iterator.get_type()` return either `{` or `[`)"""
 */

    static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_31is_object_or_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
    static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_object_or_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
      bool __pyx_r;
      __Pyx_RefNannyDeclarations
      PyObject *__pyx_t_1 = NULL;
      PyObject *__pyx_t_2 = NULL;
      PyObject *__pyx_t_3 = NULL;
      PyObject *__pyx_t_4 = NULL;
      bool __pyx_t_5;
      __Pyx_RefNannySetupContext("is_object_or_array", 0);
      /* Check if called by wrapper */
      if (unlikely(__pyx_skip_dispatch)) ;
      /* Check if overridden in Python */
      else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
        #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
        if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
          PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
          #endif
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_object_or_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_31is_object_or_array)) {
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 188, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_r = __pyx_t_5;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            goto __pyx_L0;
          }
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
          __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
          if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
            __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          }
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
        }
        #endif
      }

      /* "simdjson/csimdjson.pyx":191
 *         """True if the current element is an object/dict or an array (elements
 *         for which :func:`~Iterator.get_type()` return either `{` or `[`)"""
 *         return self.iter.is_object_or_array()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_object(self):
 */
      __pyx_r = __pyx_v_self->iter->is_object_or_array();
      goto __pyx_L0;

      /* "simdjson/csimdjson.pyx":188
 *         return self.iter.get_scope_type()
 * 
 *     cpdef bool is_object_or_array(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an object/dict or an array (elements
 *         for which :func:`~Iterator.get_type()` return either `{` or `[`)"""
 */

      /* function exit code */
      __pyx_L1_error:;
      __Pyx_XDECREF(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_4);
      __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_object_or_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
      __pyx_r = 0;
      __pyx_L0:;
      __Pyx_RefNannyFinishContext();
      return __pyx_r;
    }

    /* Python wrapper */
    static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_31is_object_or_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
    static char __pyx_doc_8simdjson_9csimdjson_8Iterator_30is_object_or_array[] = "Iterator.is_object_or_array(self) -> bool\nTrue if the current element is an object/dict or an array (elements\n        for which :func:`~Iterator.get_type()` return either `{` or `[`)";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_31is_object_or_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_object_or_array (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_30is_object_or_array(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_30is_object_or_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_object_or_array", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_object_or_array(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_object_or_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":193
 *         return self.iter.is_object_or_array()
 * 
 *     cpdef bool is_object(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an object/dict."""
 *         return self.iter.is_object()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_33is_object(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_object(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_object", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_33is_object)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 193, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":195
 *     cpdef bool is_object(self):
 *         """True if the current element is an object/dict."""
 *         return self.iter.is_object()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_array(self):
 */
        __pyx_r = __pyx_v_self->iter->is_object();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":193
 *         return self.iter.is_object_or_array()
 * 
 *     cpdef bool is_object(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an object/dict."""
 *         return self.iter.is_object()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_33is_object(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_32is_object[] = "Iterator.is_object(self) -> bool\nTrue if the current element is an object/dict.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_33is_object(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_object (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_32is_object(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_32is_object(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_object", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_object(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":197
 *         return self.iter.is_object()
 * 
 *     cpdef bool is_array(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an array."""
 *         return self.iter.is_array()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_35is_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_array", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_35is_array)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 197, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":199
 *     cpdef bool is_array(self):
 *         """True if the current element is an array."""
 *         return self.iter.is_array()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_string(self):
 */
        __pyx_r = __pyx_v_self->iter->is_array();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":197
 *         return self.iter.is_object()
 * 
 *     cpdef bool is_array(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an array."""
 *         return self.iter.is_array()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_35is_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_34is_array[] = "Iterator.is_array(self) -> bool\nTrue if the current element is an array.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_35is_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_array (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_34is_array(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_34is_array(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_array", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_array(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":201
 *         return self.iter.is_array()
 * 
 *     cpdef bool is_string(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is a string."""
 *         return self.iter.is_string()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_37is_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_string", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_37is_string)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 201, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":203
 *     cpdef bool is_string(self):
 *         """True if the current element is a string."""
 *         return self.iter.is_string()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_integer(self):
 */
        __pyx_r = __pyx_v_self->iter->is_string();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":201
 *         return self.iter.is_array()
 * 
 *     cpdef bool is_string(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is a string."""
 *         return self.iter.is_string()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_37is_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_36is_string[] = "Iterator.is_string(self) -> bool\nTrue if the current element is a string.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_37is_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_string (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_36is_string(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_36is_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_string", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_string(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":205
 *         return self.iter.is_string()
 * 
 *     cpdef bool is_integer(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an integer."""
 *         return self.iter.is_integer()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_39is_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_integer", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_integer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_39is_integer)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 205, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":207
 *     cpdef bool is_integer(self):
 *         """True if the current element is an integer."""
 *         return self.iter.is_integer()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_double(self):
 */
        __pyx_r = __pyx_v_self->iter->is_integer();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":205
 *         return self.iter.is_string()
 * 
 *     cpdef bool is_integer(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is an integer."""
 *         return self.iter.is_integer()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_integer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_39is_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_38is_integer[] = "Iterator.is_integer(self) -> bool\nTrue if the current element is an integer.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_39is_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_integer (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_38is_integer(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_38is_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_integer", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_integer(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":209
 *         return self.iter.is_integer()
 * 
 *     cpdef bool is_double(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is a double."""
 *         return self.iter.is_double()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_41is_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_8Iterator_is_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_double", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_double); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_41is_double)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 209, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":211
 *     cpdef bool is_double(self):
 *         """True if the current element is a double."""
 *         return self.iter.is_double()             # <<<<<<<<<<<<<<
 * 
 *     cpdef double get_double(self):
 */
        __pyx_r = __pyx_v_self->iter->is_double();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":209
 *         return self.iter.is_integer()
 * 
 *     cpdef bool is_double(self):             # <<<<<<<<<<<<<<
 *         """True if the current element is a double."""
 *         return self.iter.is_double()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.is_double", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_41is_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_40is_double[] = "Iterator.is_double(self) -> bool\nTrue if the current element is a double.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_41is_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_double (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_40is_double(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_40is_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_double", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_8Iterator_is_double(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.is_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":213
 *         return self.iter.is_double()
 * 
 *     cpdef double get_double(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as a double. This is only valid if
 *         :func:`~Iterator.is_double()` is True."""
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_43get_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static double __pyx_f_8simdjson_9csimdjson_8Iterator_get_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        double __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        double __pyx_t_5;
        __Pyx_RefNannySetupContext("get_double", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_double); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 213, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_43get_double)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 213, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 213, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":216
 *         """Return the current element as a double. This is only valid if
 *         :func:`~Iterator.is_double()` is True."""
 *         return self.iter.get_double()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int64_t get_integer(self):
 */
        __pyx_r = __pyx_v_self->iter->get_double();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":213
 *         return self.iter.is_double()
 * 
 *     cpdef double get_double(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as a double. This is only valid if
 *         :func:`~Iterator.is_double()` is True."""
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_double", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_43get_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_42get_double[] = "Iterator.get_double(self) -> double\nReturn the current element as a double. This is only valid if\n        :func:`~Iterator.is_double()` is True.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_43get_double(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("get_double (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_42get_double(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_42get_double(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("get_double", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8simdjson_9csimdjson_8Iterator_get_double(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":218
 *         return self.iter.get_double()
 * 
 *     cpdef int64_t get_integer(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as an integer. This is only valid if
 *         :func:`~Iterator.is_integer()` is True."""
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_45get_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static int64_t __pyx_f_8simdjson_9csimdjson_8Iterator_get_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        int64_t __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        int64_t __pyx_t_5;
        __Pyx_RefNannySetupContext("get_integer", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_integer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_45get_integer)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 218, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 218, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":221
 *         """Return the current element as an integer. This is only valid if
 *         :func:`~Iterator.is_integer()` is True."""
 *         return self.iter.get_integer()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes get_string(self):
 */
        __pyx_r = __pyx_v_self->iter->get_integer();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":218
 *         return self.iter.get_double()
 * 
 *     cpdef int64_t get_integer(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as an integer. This is only valid if
 *         :func:`~Iterator.is_integer()` is True."""
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.Iterator.get_integer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_45get_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_44get_integer[] = "Iterator.get_integer(self) -> int64_t\nReturn the current element as an integer. This is only valid if\n        :func:`~Iterator.is_integer()` is True.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_45get_integer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("get_integer (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_44get_integer(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_44get_integer(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("get_integer", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_f_8simdjson_9csimdjson_8Iterator_get_integer(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":223
 *         return self.iter.get_integer()
 * 
 *     cpdef bytes get_string(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as byte string. This is only valid if
 *         :func:`~Iterator.is_string()` is True.
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_47get_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static PyObject *__pyx_f_8simdjson_9csimdjson_8Iterator_get_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, int __pyx_skip_dispatch) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        __Pyx_RefNannySetupContext("get_string", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_8Iterator_47get_string)) {
              __Pyx_XDECREF(__pyx_r);
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 223, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 223, __pyx_L1_error)
              __pyx_r = ((PyObject*)__pyx_t_2);
              __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":232
 *                 string in Python as unicode call `get_string().decode('utf-8')`.
 *         """
 *         return <bytes>self.iter.get_string()             # <<<<<<<<<<<<<<
 * 
 *     def to_obj(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->iter->get_string()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(((PyObject*)__pyx_t_1));
        __pyx_r = ((PyObject*)__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":223
 *         return self.iter.get_integer()
 * 
 *     cpdef bytes get_string(self):             # <<<<<<<<<<<<<<
 *         """Return the current element as byte string. This is only valid if
 *         :func:`~Iterator.is_string()` is True.
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_47get_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_46get_string[] = "Iterator.get_string(self) -> bytes\nReturn the current element as byte string. This is only valid if\n        :func:`~Iterator.is_string()` is True.\n\n            .. note::\n\n                Internally, all the strings are encoded UTF-8. To use this byte\n                string in Python as unicode call `get_string().decode('utf-8')`.\n        ";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_47get_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("get_string (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_46get_string(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_46get_string(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("get_string", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __pyx_f_8simdjson_9csimdjson_8Iterator_get_string(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.get_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":234
 *         return <bytes>self.iter.get_string()
 * 
 *     def to_obj(self):             # <<<<<<<<<<<<<<
 *         """Convert the current iterator and all of its children into Python
 *         objects and return them."""
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_49to_obj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_48to_obj[] = "Iterator.to_obj(self)\nConvert the current iterator and all of its children into Python\n        objects and return them.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_49to_obj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("to_obj (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_48to_obj(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_48to_obj(struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("to_obj", 0);

        /* "simdjson/csimdjson.pyx":237
 *         """Convert the current iterator and all of its children into Python
 *         objects and return them."""
 *         return _to_obj(self.iter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __pyx_f_8simdjson_9csimdjson__to_obj(__pyx_v_self->iter); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":234
 *         return <bytes>self.iter.get_string()
 * 
 *     def to_obj(self):             # <<<<<<<<<<<<<<
 *         """Convert the current iterator and all of its children into Python
 *         objects and return them."""
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.to_obj", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_50__reduce_cython__[] = "Iterator.__reduce_cython__(self)";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_50__reduce_cython__(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("__reduce_cython__", 0);

        /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 2, __pyx_L1_error)

        /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_8Iterator_52__setstate_cython__[] = "Iterator.__setstate_cython__(self, __pyx_state)";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_8Iterator_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_8Iterator_52__setstate_cython__(((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_8Iterator_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("__setstate_cython__", 0);

        /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 4, __pyx_L1_error)

        /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.Iterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":248
 *     cdef CParsedJson pj
 * 
 *     def __init__(self, source=None):             # <<<<<<<<<<<<<<
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:
 */

      /* Python wrapper */
      static int __pyx_pw_8simdjson_9csimdjson_10ParsedJson_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
      static int __pyx_pw_8simdjson_9csimdjson_10ParsedJson_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
        PyObject *__pyx_v_source = 0;
        int __pyx_r;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
        {
          static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,0};
          PyObject* values[1] = {0};
          values[0] = ((PyObject *)Py_None);
          if (unlikely(__pyx_kwds)) {
            Py_ssize_t kw_args;
            const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
            switch (pos_args) {
              case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
              CYTHON_FALLTHROUGH;
              case  0: break;
              default: goto __pyx_L5_argtuple_error;
            }
            kw_args = PyDict_Size(__pyx_kwds);
            switch (pos_args) {
              case  0:
              if (kw_args > 0) {
                PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source);
                if (value) { values[0] = value; kw_args--; }
              }
            }
            if (unlikely(kw_args > 0)) {
              if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 248, __pyx_L3_error)
            }
          } else {
            switch (PyTuple_GET_SIZE(__pyx_args)) {
              case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
              CYTHON_FALLTHROUGH;
              case  0: break;
              default: goto __pyx_L5_argtuple_error;
            }
          }
          __pyx_v_source = values[0];
        }
        goto __pyx_L4_argument_unpacking_done;
        __pyx_L5_argtuple_error:;
        __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 248, __pyx_L3_error)
        __pyx_L3_error:;
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __Pyx_RefNannyFinishContext();
        return -1;
        __pyx_L4_argument_unpacking_done:;
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson___init__(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self), __pyx_v_source);

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static int __pyx_pf_8simdjson_9csimdjson_10ParsedJson___init__(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_source) {
        int8_t __pyx_v_avx2;
        int __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        int __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        Py_ssize_t __pyx_t_4;
        PyObject *__pyx_t_5 = NULL;
        PyObject *__pyx_t_6 = NULL;
        int __pyx_t_7;
        PyObject *__pyx_t_8 = NULL;
        int __pyx_t_9;
        __Pyx_RefNannySetupContext("__init__", 0);

        /* "simdjson/csimdjson.pyx":249
 * 
 *     def __init__(self, source=None):
 *         avx2 = can_use_avx2()             # <<<<<<<<<<<<<<
 *         if avx2 == -1:
 *             raise RuntimeError(
 */
        __pyx_v_avx2 = can_use_avx2();

        /* "simdjson/csimdjson.pyx":250
 *     def __init__(self, source=None):
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'simdjson requires AVX2 support, however it has not been'
 */
        switch (__pyx_v_avx2) {
          case -1L:

          /* "simdjson/csimdjson.pyx":251
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'simdjson requires AVX2 support, however it has not been'
 *                 ' enabled by your operating system.'
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(1, 251, __pyx_L1_error)

          /* "simdjson/csimdjson.pyx":250
 *     def __init__(self, source=None):
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'simdjson requires AVX2 support, however it has not been'
 */
          break;
          case 0:

          /* "simdjson/csimdjson.pyx":256
 *             )
 *         elif avx2 == 0:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'simdjson requires AVX2 support, which is not provided by'
 *                 ' your processor.'
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 256, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(1, 256, __pyx_L1_error)

          /* "simdjson/csimdjson.pyx":255
 *                 ' enabled by your operating system.'
 *             )
 *         elif avx2 == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'simdjson requires AVX2 support, which is not provided by'
 */
          break;
          default: break;
        }

        /* "simdjson/csimdjson.pyx":262
 * 
 * 
 *         if source:             # <<<<<<<<<<<<<<
 *             if not self.allocate_capacity(len(source)):
 *                 raise MemoryError
 */
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_source); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 262, __pyx_L1_error)
        if (__pyx_t_2) {

          /* "simdjson/csimdjson.pyx":263
 * 
 *         if source:
 *             if not self.allocate_capacity(len(source)):             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_allocate_capacity); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyObject_Length(__pyx_v_source); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 263, __pyx_L1_error)
          __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 263, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_7 = ((!__pyx_t_2) != 0);
          if (unlikely(__pyx_t_7)) {

            /* "simdjson/csimdjson.pyx":264
 *         if source:
 *             if not self.allocate_capacity(len(source)):
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *             if not self.parse(source):
 */
            PyErr_NoMemory(); __PYX_ERR(1, 264, __pyx_L1_error)

            /* "simdjson/csimdjson.pyx":263
 * 
 *         if source:
 *             if not self.allocate_capacity(len(source)):             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
          }

          /* "simdjson/csimdjson.pyx":266
 *                 raise MemoryError
 * 
 *             if not self.parse(source):             # <<<<<<<<<<<<<<
 *                 # We have no idea what really went wrong, simdjson oddly just
 *                 # writes to cerr instead of setting any kind of error codes.
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 266, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_source) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_source);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 266, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 266, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_2 = ((!__pyx_t_7) != 0);
          if (unlikely(__pyx_t_2)) {

            /* "simdjson/csimdjson.pyx":269
 *                 # We have no idea what really went wrong, simdjson oddly just
 *                 # writes to cerr instead of setting any kind of error codes.
 *                 raise JSONDecodeError(             # <<<<<<<<<<<<<<
 *                     'Error parsing document',
 *                     source.decode('utf-7'),
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_JSONDecodeError); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);

            /* "simdjson/csimdjson.pyx":271
 *                 raise JSONDecodeError(
 *                     'Error parsing document',
 *                     source.decode('utf-7'),             # <<<<<<<<<<<<<<
 *                     0
 *                 )
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_decode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 271, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_kp_s_utf_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_utf_7);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 271, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_9 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_s_Error_parsing_document, __pyx_t_5, __pyx_int_0};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_kp_s_Error_parsing_document, __pyx_t_5, __pyx_int_0};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 269, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (__pyx_t_6) {
                __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
              }
              __Pyx_INCREF(__pyx_kp_s_Error_parsing_document);
              __Pyx_GIVEREF(__pyx_kp_s_Error_parsing_document);
              PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_kp_s_Error_parsing_document);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_5);
              __Pyx_INCREF(__pyx_int_0);
              __Pyx_GIVEREF(__pyx_int_0);
              PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_int_0);
              __pyx_t_5 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __PYX_ERR(1, 269, __pyx_L1_error)

            /* "simdjson/csimdjson.pyx":266
 *                 raise MemoryError
 * 
 *             if not self.parse(source):             # <<<<<<<<<<<<<<
 *                 # We have no idea what really went wrong, simdjson oddly just
 *                 # writes to cerr instead of setting any kind of error codes.
 */
          }

          /* "simdjson/csimdjson.pyx":262
 * 
 * 
 *         if source:             # <<<<<<<<<<<<<<
 *             if not self.allocate_capacity(len(source)):
 *                 raise MemoryError
 */
        }

        /* "simdjson/csimdjson.pyx":248
 *     cdef CParsedJson pj
 * 
 *     def __init__(self, source=None):             # <<<<<<<<<<<<<<
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:
 */

        /* function exit code */
        __pyx_r = 0;
        goto __pyx_L0;
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_8);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = -1;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":275
 *                 )
 * 
 *     def allocate_capacity(self, size, max_depth=DEFAULT_MAX_DEPTH):             # <<<<<<<<<<<<<<
 *         """Resize the document buffer to `size` bytes."""
 *         return self.pj.allocateCapacity(size, max_depth)
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_3allocate_capacity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_2allocate_capacity[] = "ParsedJson.allocate_capacity(self, size, max_depth=DEFAULT_MAX_DEPTH)\nResize the document buffer to `size` bytes.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_3allocate_capacity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
        PyObject *__pyx_v_size = 0;
        PyObject *__pyx_v_max_depth = 0;
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("allocate_capacity (wrapper)", 0);
        {
          static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_max_depth,0};
          PyObject* values[2] = {0,0};
          values[1] = __pyx_k__5;
          if (unlikely(__pyx_kwds)) {
            Py_ssize_t kw_args;
            const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
            switch (pos_args) {
              case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
              CYTHON_FALLTHROUGH;
              case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
              CYTHON_FALLTHROUGH;
              case  0: break;
              default: goto __pyx_L5_argtuple_error;
            }
            kw_args = PyDict_Size(__pyx_kwds);
            switch (pos_args) {
              case  0:
              if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
              else goto __pyx_L5_argtuple_error;
              CYTHON_FALLTHROUGH;
              case  1:
              if (kw_args > 0) {
                PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_depth);
                if (value) { values[1] = value; kw_args--; }
              }
            }
            if (unlikely(kw_args > 0)) {
              if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "allocate_capacity") < 0)) __PYX_ERR(1, 275, __pyx_L3_error)
            }
          } else {
            switch (PyTuple_GET_SIZE(__pyx_args)) {
              case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
              CYTHON_FALLTHROUGH;
              case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
              break;
              default: goto __pyx_L5_argtuple_error;
            }
          }
          __pyx_v_size = values[0];
          __pyx_v_max_depth = values[1];
        }
        goto __pyx_L4_argument_unpacking_done;
        __pyx_L5_argtuple_error:;
        __Pyx_RaiseArgtupleInvalid("allocate_capacity", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 275, __pyx_L3_error)
        __pyx_L3_error:;
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.allocate_capacity", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __Pyx_RefNannyFinishContext();
        return NULL;
        __pyx_L4_argument_unpacking_done:;
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_2allocate_capacity(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self), __pyx_v_size, __pyx_v_max_depth);

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_2allocate_capacity(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_max_depth) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        size_t __pyx_t_1;
        size_t __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        __Pyx_RefNannySetupContext("allocate_capacity", 0);

        /* "simdjson/csimdjson.pyx":277
 *     def allocate_capacity(self, size, max_depth=DEFAULT_MAX_DEPTH):
 *         """Resize the document buffer to `size` bytes."""
 *         return self.pj.allocateCapacity(size, max_depth)             # <<<<<<<<<<<<<<
 * 
 *     def parse(self, source):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_max_depth); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->pj.allocateCapacity(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":275
 *                 )
 * 
 *     def allocate_capacity(self, size, max_depth=DEFAULT_MAX_DEPTH):             # <<<<<<<<<<<<<<
 *         """Resize the document buffer to `size` bytes."""
 *         return self.pj.allocateCapacity(size, max_depth)
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.allocate_capacity", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":279
 *         return self.pj.allocateCapacity(size, max_depth)
 * 
 *     def parse(self, source):             # <<<<<<<<<<<<<<
 *         """Parse the given document (as bytes).
 * 
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_5parse(PyObject *__pyx_v_self, PyObject *__pyx_v_source); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_4parse[] = "ParsedJson.parse(self, source)\nParse the given document (as bytes).\n\n            .. note::\n\n                It's up to the caller to ensure that allocate_capacity has been\n                called with a sufficiently large size before this method is\n                called.\n        ";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_5parse(PyObject *__pyx_v_self, PyObject *__pyx_v_source) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("parse (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_4parse(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self), ((PyObject *)__pyx_v_source));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_4parse(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_source) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        char const *__pyx_t_1;
        Py_ssize_t __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        __Pyx_RefNannySetupContext("parse", 0);

        /* "simdjson/csimdjson.pyx":288
 *                 called.
 *         """
 *         return json_parse(source, len(source), self.pj, True)             # <<<<<<<<<<<<<<
 * 
 *     def to_obj(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_source); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 288, __pyx_L1_error)
        __pyx_t_2 = PyObject_Length(__pyx_v_source); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 288, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyBool_FromLong(json_parse(__pyx_t_1, __pyx_t_2, __pyx_v_self->pj, 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":279
 *         return self.pj.allocateCapacity(size, max_depth)
 * 
 *     def parse(self, source):             # <<<<<<<<<<<<<<
 *         """Parse the given document (as bytes).
 * 
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":290
 *         return json_parse(source, len(source), self.pj, True)
 * 
 *     def to_obj(self):             # <<<<<<<<<<<<<<
 *         """Recursively convert a parsed json document to a Python object and
 *         return it.
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_7to_obj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_6to_obj[] = "ParsedJson.to_obj(self)\nRecursively convert a parsed json document to a Python object and\n        return it.\n        ";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_7to_obj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("to_obj (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_6to_obj(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_6to_obj(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self) {
        struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_iter = NULL;
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        int __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        __Pyx_RefNannySetupContext("to_obj", 0);

        /* "simdjson/csimdjson.pyx":294
 *         return it.
 *         """
 *         iter = Iterator(self)             # <<<<<<<<<<<<<<
 *         if not iter.isOk():
 *             # Prooooably not the right exception
 */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8simdjson_9csimdjson_Iterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_iter = ((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_t_1);
        __pyx_t_1 = 0;

        /* "simdjson/csimdjson.pyx":295
 *         """
 *         iter = Iterator(self)
 *         if not iter.isOk():             # <<<<<<<<<<<<<<
 *             # Prooooably not the right exception
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 */
        __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->isOk(__pyx_v_iter, 0) != 0)) != 0);
        if (unlikely(__pyx_t_2)) {

          /* "simdjson/csimdjson.pyx":297
 *         if not iter.isOk():
 *             # Prooooably not the right exception
 *             raise JSONDecodeError('Error iterating over document', '', 0)             # <<<<<<<<<<<<<<
 *         return iter.to_obj()
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_JSONDecodeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_ERR(1, 297, __pyx_L1_error)

          /* "simdjson/csimdjson.pyx":295
 *         """
 *         iter = Iterator(self)
 *         if not iter.isOk():             # <<<<<<<<<<<<<<
 *             # Prooooably not the right exception
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 */
        }

        /* "simdjson/csimdjson.pyx":298
 *             # Prooooably not the right exception
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 *         return iter.to_obj()             # <<<<<<<<<<<<<<
 * 
 *     def items(self, query):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":290
 *         return json_parse(source, len(source), self.pj, True)
 * 
 *     def to_obj(self):             # <<<<<<<<<<<<<<
 *         """Recursively convert a parsed json document to a Python object and
 *         return it.
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.to_obj", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XDECREF((PyObject *)__pyx_v_iter);
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":300
 *         return iter.to_obj()
 * 
 *     def items(self, query):             # <<<<<<<<<<<<<<
 *         """Given a `query` string, find matching elements in the document and
 *         return them.
 */

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_9items(PyObject *__pyx_v_self, PyObject *__pyx_v_query); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_8items[] = "ParsedJson.items(self, query)\nGiven a `query` string, find matching elements in the document and\n        return them.\n\n        If you only desire part of a document, this method offers significant\n        oppertunities for performance gains, as it will avoid creating Python\n        objects for anything other than the matching objects. For example, if\n        you have a situation where you check a boolean, such as:\n\n            .. code-block:: json\n\n                {\"results\": [\"...50MB...\"], \"success\": true}\n\n        ... you could check just the success field before wasting time loading\n        the entire document into Python objects.\n\n            .. code-block:: python\n\n                with open(\"myjson.json\", \"rb\") as source:\n                    pj = ParsedJson(source)\n                    if pj.items(\".success\"):\n                        document = pj.to_obj()\n\n            .. note::\n\n                It's important to note this is not using iterative parsing. By\n                the time `items()` can be used, the entire document has already\n                been parsed (which is relatively fast), but has not been\n                converted into Python objects (which is relatively slow).\n        ";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_9items(PyObject *__pyx_v_self, PyObject *__pyx_v_query) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("items (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_8items(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self), ((PyObject *)__pyx_v_query));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_8items(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, PyObject *__pyx_v_query) {
        PyObject *__pyx_v_parsed_query = 0;
        struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_iter = NULL;
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        int __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        __Pyx_RefNannySetupContext("items", 0);

        /* "simdjson/csimdjson.pyx":330
 *                 converted into Python objects (which is relatively slow).
 *         """
 *         cdef list parsed_query = parse_query(query)             # <<<<<<<<<<<<<<
 * 
 *         iter = Iterator(self)
 */
        __pyx_t_1 = __pyx_f_8simdjson_9csimdjson_parse_query(__pyx_v_query, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_parsed_query = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;

        /* "simdjson/csimdjson.pyx":332
 *         cdef list parsed_query = parse_query(query)
 * 
 *         iter = Iterator(self)             # <<<<<<<<<<<<<<
 *         if not iter.isOk():
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8simdjson_9csimdjson_Iterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_iter = ((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)__pyx_t_1);
        __pyx_t_1 = 0;

        /* "simdjson/csimdjson.pyx":333
 * 
 *         iter = Iterator(self)
 *         if not iter.isOk():             # <<<<<<<<<<<<<<
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 * 
 */
        __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->isOk(__pyx_v_iter, 0) != 0)) != 0);
        if (unlikely(__pyx_t_2)) {

          /* "simdjson/csimdjson.pyx":334
 *         iter = Iterator(self)
 *         if not iter.isOk():
 *             raise JSONDecodeError('Error iterating over document', '', 0)             # <<<<<<<<<<<<<<
 * 
 *         return self._items(iter, parsed_query)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_JSONDecodeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_ERR(1, 334, __pyx_L1_error)

          /* "simdjson/csimdjson.pyx":333
 * 
 *         iter = Iterator(self)
 *         if not iter.isOk():             # <<<<<<<<<<<<<<
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 * 
 */
        }

        /* "simdjson/csimdjson.pyx":336
 *             raise JSONDecodeError('Error iterating over document', '', 0)
 * 
 *         return self._items(iter, parsed_query)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_valid(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, __pyx_v_parsed_query); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":300
 *         return iter.to_obj()
 * 
 *     def items(self, query):             # <<<<<<<<<<<<<<
 *         """Given a `query` string, find matching elements in the document and
 *         return them.
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XDECREF(__pyx_v_parsed_query);
        __Pyx_XDECREF((PyObject *)__pyx_v_iter);
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":338
 *         return self._items(iter, parsed_query)
 * 
 *     cpdef bool is_valid(self):             # <<<<<<<<<<<<<<
 *         """True if the internal state of the parsed json is valid."""
 *         return self.pj.isValid()
 */

      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_11is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static bool __pyx_f_8simdjson_9csimdjson_10ParsedJson_is_valid(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, int __pyx_skip_dispatch) {
        bool __pyx_r;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        PyObject *__pyx_t_2 = NULL;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        bool __pyx_t_5;
        __Pyx_RefNannySetupContext("is_valid", 0);
        /* Check if called by wrapper */
        if (unlikely(__pyx_skip_dispatch)) ;
        /* Check if overridden in Python */
        else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
          #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
          if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
            PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            #endif
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_11is_valid)) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 338, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_r = __pyx_t_5;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L0;
            }
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
            __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
            __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
            if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
              __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            }
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
          }
          #endif
        }

        /* "simdjson/csimdjson.pyx":340
 *     cpdef bool is_valid(self):
 *         """True if the internal state of the parsed json is valid."""
 *         return self.pj.isValid()             # <<<<<<<<<<<<<<
 * 
 *     cdef object _items(self, Iterator iter, list parsed_query):
 */
        __pyx_r = __pyx_v_self->pj.isValid();
        goto __pyx_L0;

        /* "simdjson/csimdjson.pyx":338
 *         return self._items(iter, parsed_query)
 * 
 *     cpdef bool is_valid(self):             # <<<<<<<<<<<<<<
 *         """True if the internal state of the parsed json is valid."""
 *         return self.pj.isValid()
 */

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4);
        __Pyx_WriteUnraisable("simdjson.csimdjson.ParsedJson.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
        __pyx_r = 0;
        __pyx_L0:;
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* Python wrapper */
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_11is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
      static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_10is_valid[] = "ParsedJson.is_valid(self) -> bool\nTrue if the internal state of the parsed json is valid.";
      static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_11is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
        PyObject *__pyx_r = 0;
        __Pyx_RefNannyDeclarations
        __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
        __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_10is_valid(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self));

        /* function exit code */
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_10is_valid(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self) {
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        PyObject *__pyx_t_1 = NULL;
        __Pyx_RefNannySetupContext("is_valid", 0);
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8simdjson_9csimdjson_10ParsedJson_is_valid(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* function exit code */
        __pyx_L1_error:;
        __Pyx_XDECREF(__pyx_t_1);
        __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
        __pyx_r = NULL;
        __pyx_L0:;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        return __pyx_r;
      }

      /* "simdjson/csimdjson.pyx":342
 *         return self.pj.isValid()
 * 
 *     cdef object _items(self, Iterator iter, list parsed_query):             # <<<<<<<<<<<<<<
 *         # TODO: Proof-of-concept, needs an optimization pass.
 *         if not parsed_query:
 */

      static PyObject *__pyx_f_8simdjson_9csimdjson_10ParsedJson__items(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, struct __pyx_obj_8simdjson_9csimdjson_Iterator *__pyx_v_iter, PyObject *__pyx_v_parsed_query) {
        char __pyx_v_t;
        int __pyx_v_op;
        int __pyx_v_current_index;
        int __pyx_v_segments;
        PyObject *__pyx_v_obj = 0;
        PyObject *__pyx_v_array_result = 0;
        PyObject *__pyx_v_v = NULL;
        PyObject *__pyx_v_stop_index = NULL;
        PyObject *__pyx_v_start_index = NULL;
        PyObject *__pyx_r = NULL;
        __Pyx_RefNannyDeclarations
        int __pyx_t_1;
        int __pyx_t_2;
        PyObject *__pyx_t_3 = NULL;
        PyObject *__pyx_t_4 = NULL;
        PyObject *__pyx_t_5 = NULL;
        PyObject *__pyx_t_6 = NULL;
        PyObject *(*__pyx_t_7)(PyObject *);
        int __pyx_t_8;
        Py_ssize_t __pyx_t_9;
        int __pyx_t_10;
        __Pyx_RefNannySetupContext("_items", 0);

        /* "simdjson/csimdjson.pyx":344
 *     cdef object _items(self, Iterator iter, list parsed_query):
 *         # TODO: Proof-of-concept, needs an optimization pass.
 *         if not parsed_query:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
        __pyx_t_1 = (__pyx_v_parsed_query != Py_None)&&(PyList_GET_SIZE(__pyx_v_parsed_query) != 0);
        __pyx_t_2 = ((!__pyx_t_1) != 0);
        if (__pyx_t_2) {

          /* "simdjson/csimdjson.pyx":345
 *         # TODO: Proof-of-concept, needs an optimization pass.
 *         if not parsed_query:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef char t = <char>iter.get_type()
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L0;

          /* "simdjson/csimdjson.pyx":344
 *     cdef object _items(self, Iterator iter, list parsed_query):
 *         # TODO: Proof-of-concept, needs an optimization pass.
 *         if not parsed_query:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
        }

        /* "simdjson/csimdjson.pyx":347
 *             return
 * 
 *         cdef char t = <char>iter.get_type()             # <<<<<<<<<<<<<<
 *         cdef int op
 *         cdef int current_index = 0
 */
        __pyx_v_t = ((char)((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->get_type(__pyx_v_iter, 0));

        /* "simdjson/csimdjson.pyx":349
 *         cdef char t = <char>iter.get_type()
 *         cdef int op
 *         cdef int current_index = 0             # <<<<<<<<<<<<<<
 *         cdef int segments
 *         cdef object obj = None
 */
        __pyx_v_current_index = 0;

        /* "simdjson/csimdjson.pyx":351
 *         cdef int current_index = 0
 *         cdef int segments
 *         cdef object obj = None             # <<<<<<<<<<<<<<
 *         cdef list array_result
 * 
 */
        __Pyx_INCREF(Py_None);
        __pyx_v_obj = Py_None;

        /* "simdjson/csimdjson.pyx":354
 *         cdef list array_result
 * 
 *         op, v = parsed_query[0]             # <<<<<<<<<<<<<<
 *         segments = len(parsed_query)
 * 
 */
        if (unlikely(__pyx_v_parsed_query == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(1, 354, __pyx_L1_error)
        }
        __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_parsed_query, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(1, 354, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          #else
          __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 354, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 354, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 354, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
          index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(1, 354, __pyx_L1_error)
          __pyx_t_7 = NULL;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L5_unpacking_done;
          __pyx_L4_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_7 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(1, 354, __pyx_L1_error)
          __pyx_L5_unpacking_done:;
        }
        __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 354, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_op = __pyx_t_8;
        __pyx_v_v = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "simdjson/csimdjson.pyx":355
 * 
 *         op, v = parsed_query[0]
 *         segments = len(parsed_query)             # <<<<<<<<<<<<<<
 * 
 *         if op == N_GET:
 */
        if (unlikely(__pyx_v_parsed_query == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(1, 355, __pyx_L1_error)
        }
        __pyx_t_9 = PyList_GET_SIZE(__pyx_v_parsed_query); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 355, __pyx_L1_error)
        __pyx_v_segments = __pyx_t_9;

        /* "simdjson/csimdjson.pyx":357
 *         segments = len(parsed_query)
 * 
 *         if op == N_GET:             # <<<<<<<<<<<<<<
 *             if t == '{':
 *                 # We're getting the entire object, no further filtering
 */
        switch (__pyx_v_op) {
          case __pyx_e_8simdjson_9csimdjson_N_GET:

          /* "simdjson/csimdjson.pyx":358
 * 
 *         if op == N_GET:
 *             if t == '{':             # <<<<<<<<<<<<<<
 *                 # We're getting the entire object, no further filtering
 *                 # required.
 */
          __pyx_t_2 = ((__pyx_v_t == '{') != 0);
            if (__pyx_t_2) {

              /* "simdjson/csimdjson.pyx":361
 *                 # We're getting the entire object, no further filtering
 *                 # required.
 *                 if v == b'':             # <<<<<<<<<<<<<<
 *                     if segments > 1:
 *                         # There are more query fragments, so we have
 */
              __pyx_t_2 = (__Pyx_PyBytes_Equals(__pyx_v_v, __pyx_kp_b__6, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 361, __pyx_L1_error)
              if (__pyx_t_2) {

                /* "simdjson/csimdjson.pyx":362
 *                 # required.
 *                 if v == b'':
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         # There are more query fragments, so we have
 *                         # further filtering to do...
 */
                __pyx_t_2 = ((__pyx_v_segments > 1) != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":365
 *                         # There are more query fragments, so we have
 *                         # further filtering to do...
 *                         obj = self._items(iter, parsed_query[1:])             # <<<<<<<<<<<<<<
 *                     else:
 *                         # ... otherwise, we want the entire result.
 */
                  if (unlikely(__pyx_v_parsed_query == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(1, 365, __pyx_L1_error)
                  }
                  __pyx_t_3 = __Pyx_PyList_GetSlice(__pyx_v_parsed_query, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 365, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_5 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 365, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_5);
                  __pyx_t_5 = 0;

                  /* "simdjson/csimdjson.pyx":362
 *                 # required.
 *                 if v == b'':
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         # There are more query fragments, so we have
 *                         # further filtering to do...
 */
                  goto __pyx_L8;
                }

                /* "simdjson/csimdjson.pyx":368
 *                     else:
 *                         # ... otherwise, we want the entire result.
 *                         obj = iter.to_obj()             # <<<<<<<<<<<<<<
 *                     return obj
 * 
 */
                /*else*/ {
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 368, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_4 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_4)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_4);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 368, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_5);
                  __pyx_t_5 = 0;
                }
                __pyx_L8:;

                /* "simdjson/csimdjson.pyx":369
 *                         # ... otherwise, we want the entire result.
 *                         obj = iter.to_obj()
 *                     return obj             # <<<<<<<<<<<<<<
 * 
 *                 # We're looking for a specific field.
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(__pyx_v_obj);
                __pyx_r = __pyx_v_obj;
                goto __pyx_L0;

                /* "simdjson/csimdjson.pyx":361
 *                 # We're getting the entire object, no further filtering
 *                 # required.
 *                 if v == b'':             # <<<<<<<<<<<<<<
 *                     if segments > 1:
 *                         # There are more query fragments, so we have
 */
              }

              /* "simdjson/csimdjson.pyx":372
 * 
 *                 # We're looking for a specific field.
 *                 if iter.down():             # <<<<<<<<<<<<<<
 *                     while True:
 *                         if v == b'' or v == iter.get_string():
 */
              __pyx_t_2 = (((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->down(__pyx_v_iter, 0) != 0);
              if (__pyx_t_2) {

                /* "simdjson/csimdjson.pyx":373
 *                 # We're looking for a specific field.
 *                 if iter.down():
 *                     while True:             # <<<<<<<<<<<<<<
 *                         if v == b'' or v == iter.get_string():
 *                             # Found a matching key, move to the value.
 */
                while (1) {

                  /* "simdjson/csimdjson.pyx":374
 *                 if iter.down():
 *                     while True:
 *                         if v == b'' or v == iter.get_string():             # <<<<<<<<<<<<<<
 *                             # Found a matching key, move to the value.
 *                             iter.next()
 */
                  __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_v_v, __pyx_kp_b__6, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 374, __pyx_L1_error)
                  if (!__pyx_t_1) {
                  } else {
                    __pyx_t_2 = __pyx_t_1;
                    goto __pyx_L13_bool_binop_done;
                  }
                  __pyx_t_5 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->get_string(__pyx_v_iter, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 374, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_v_v, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 374, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __pyx_t_2 = __pyx_t_1;
                  __pyx_L13_bool_binop_done:;
                  if (__pyx_t_2) {

                    /* "simdjson/csimdjson.pyx":376
 *                         if v == b'' or v == iter.get_string():
 *                             # Found a matching key, move to the value.
 *                             iter.next()             # <<<<<<<<<<<<<<
 *                             if segments > 1:
 *                                 # There are more query fragments, so we have
 */
                    (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0));

                    /* "simdjson/csimdjson.pyx":377
 *                             # Found a matching key, move to the value.
 *                             iter.next()
 *                             if segments > 1:             # <<<<<<<<<<<<<<
 *                                 # There are more query fragments, so we have
 *                                 # further filtering to do...
 */
                    __pyx_t_2 = ((__pyx_v_segments > 1) != 0);
                    if (__pyx_t_2) {

                      /* "simdjson/csimdjson.pyx":380
 *                                 # There are more query fragments, so we have
 *                                 # further filtering to do...
 *                                 obj = self._items(iter, parsed_query[1:])             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # ... otherwise, we want the entire result.
 */
                      if (unlikely(__pyx_v_parsed_query == Py_None)) {
                        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                        __PYX_ERR(1, 380, __pyx_L1_error)
                      }
                      __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_parsed_query, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 380, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_3 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 380, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_3);
                      __pyx_t_3 = 0;

                      /* "simdjson/csimdjson.pyx":377
 *                             # Found a matching key, move to the value.
 *                             iter.next()
 *                             if segments > 1:             # <<<<<<<<<<<<<<
 *                                 # There are more query fragments, so we have
 *                                 # further filtering to do...
 */
                      goto __pyx_L15;
                    }

                    /* "simdjson/csimdjson.pyx":383
 *                             else:
 *                                 # ... otherwise, we want the entire result.
 *                                 obj = iter.to_obj()             # <<<<<<<<<<<<<<
 *                             break
 *                         else:
 */
                    /*else*/ {
                      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 383, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_4 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
                        if (likely(__pyx_t_4)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                          __Pyx_INCREF(__pyx_t_4);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_5, function);
                        }
                      }
                      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 383, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_3);
                      __pyx_t_3 = 0;
                    }
                    __pyx_L15:;

                    /* "simdjson/csimdjson.pyx":384
 *                                 # ... otherwise, we want the entire result.
 *                                 obj = iter.to_obj()
 *                             break             # <<<<<<<<<<<<<<
 *                         else:
 *                             # Didn't find a match, skip over the value and move
 */
                    goto __pyx_L11_break;

                    /* "simdjson/csimdjson.pyx":374
 *                 if iter.down():
 *                     while True:
 *                         if v == b'' or v == iter.get_string():             # <<<<<<<<<<<<<<
 *                             # Found a matching key, move to the value.
 *                             iter.next()
 */
                  }

                  /* "simdjson/csimdjson.pyx":388
 *                             # Didn't find a match, skip over the value and move
 *                             # to the next key.
 *                             iter.next()             # <<<<<<<<<<<<<<
 * 
 *                         if not iter.next():
 */
                  /*else*/ {
                    (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0));
                  }

                  /* "simdjson/csimdjson.pyx":390
 *                             iter.next()
 * 
 *                         if not iter.next():             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0) != 0)) != 0);
                  if (__pyx_t_2) {

                    /* "simdjson/csimdjson.pyx":391
 * 
 *                         if not iter.next():
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                     iter.up()
 */
                    goto __pyx_L11_break;

                    /* "simdjson/csimdjson.pyx":390
 *                             iter.next()
 * 
 *                         if not iter.next():             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  }
                }
                __pyx_L11_break:;

                /* "simdjson/csimdjson.pyx":393
 *                             break
 * 
 *                     iter.up()             # <<<<<<<<<<<<<<
 *                 return obj
 *         elif op == N_ARRAY:
 */
                (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->up(__pyx_v_iter, 0));

                /* "simdjson/csimdjson.pyx":372
 * 
 *                 # We're looking for a specific field.
 *                 if iter.down():             # <<<<<<<<<<<<<<
 *                     while True:
 *                         if v == b'' or v == iter.get_string():
 */
              }

              /* "simdjson/csimdjson.pyx":394
 * 
 *                     iter.up()
 *                 return obj             # <<<<<<<<<<<<<<
 *         elif op == N_ARRAY:
 *             # We're fetching an entire array.
 */
              __Pyx_XDECREF(__pyx_r);
              __Pyx_INCREF(__pyx_v_obj);
              __pyx_r = __pyx_v_obj;
              goto __pyx_L0;

              /* "simdjson/csimdjson.pyx":358
 * 
 *         if op == N_GET:
 *             if t == '{':             # <<<<<<<<<<<<<<
 *                 # We're getting the entire object, no further filtering
 *                 # required.
 */
            }

            /* "simdjson/csimdjson.pyx":357
 *         segments = len(parsed_query)
 * 
 *         if op == N_GET:             # <<<<<<<<<<<<<<
 *             if t == '{':
 *                 # We're getting the entire object, no further filtering
 */
            break;
            case __pyx_e_8simdjson_9csimdjson_N_ARRAY:

            /* "simdjson/csimdjson.pyx":397
 *         elif op == N_ARRAY:
 *             # We're fetching an entire array.
 *             array_result = []             # <<<<<<<<<<<<<<
 * 
 *             if iter.down():
 */
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 397, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_v_array_result = ((PyObject*)__pyx_t_3);
            __pyx_t_3 = 0;

            /* "simdjson/csimdjson.pyx":399
 *             array_result = []
 * 
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if segments > 1:
 */
            __pyx_t_2 = (((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->down(__pyx_v_iter, 0) != 0);
            if (__pyx_t_2) {

              /* "simdjson/csimdjson.pyx":400
 * 
 *             if iter.down():
 *                 while True:             # <<<<<<<<<<<<<<
 *                     if segments > 1:
 *                         array_result.append(
 */
              while (1) {

                /* "simdjson/csimdjson.pyx":401
 *             if iter.down():
 *                 while True:
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         array_result.append(
 *                             self._items(
 */
                __pyx_t_2 = ((__pyx_v_segments > 1) != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":405
 *                             self._items(
 *                                 iter,
 *                                 parsed_query[1:]             # <<<<<<<<<<<<<<
 *                             )
 *                         )
 */
                  if (unlikely(__pyx_v_parsed_query == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(1, 405, __pyx_L1_error)
                  }
                  __pyx_t_3 = __Pyx_PyList_GetSlice(__pyx_v_parsed_query, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);

                  /* "simdjson/csimdjson.pyx":403
 *                     if segments > 1:
 *                         array_result.append(
 *                             self._items(             # <<<<<<<<<<<<<<
 *                                 iter,
 *                                 parsed_query[1:]
 */
                  __pyx_t_5 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 403, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "simdjson/csimdjson.pyx":402
 *                 while True:
 *                     if segments > 1:
 *                         array_result.append(             # <<<<<<<<<<<<<<
 *                             self._items(
 *                                 iter,
 */
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_array_result, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 402, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

                  /* "simdjson/csimdjson.pyx":401
 *             if iter.down():
 *                 while True:
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         array_result.append(
 *                             self._items(
 */
                  goto __pyx_L20;
                }

                /* "simdjson/csimdjson.pyx":409
 *                         )
 *                     else:
 *                         array_result.append(iter.to_obj())             # <<<<<<<<<<<<<<
 * 
 *                     if not iter.next():
 */
                /*else*/ {
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_4 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_4)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_4);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_array_result, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 409, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
                __pyx_L20:;

                /* "simdjson/csimdjson.pyx":411
 *                         array_result.append(iter.to_obj())
 * 
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0) != 0)) != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":412
 * 
 *                     if not iter.next():
 *                         break             # <<<<<<<<<<<<<<
 * 
 *                     current_index += 1
 */
                  goto __pyx_L19_break;

                  /* "simdjson/csimdjson.pyx":411
 *                         array_result.append(iter.to_obj())
 * 
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                }

                /* "simdjson/csimdjson.pyx":414
 *                         break
 * 
 *                     current_index += 1             # <<<<<<<<<<<<<<
 * 
 *                 iter.up()
 */
                __pyx_v_current_index = (__pyx_v_current_index + 1);
              }
              __pyx_L19_break:;

              /* "simdjson/csimdjson.pyx":416
 *                     current_index += 1
 * 
 *                 iter.up()             # <<<<<<<<<<<<<<
 *             return array_result
 *         elif op == N_ARRAY_SINGLE:
 */
              (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->up(__pyx_v_iter, 0));

              /* "simdjson/csimdjson.pyx":399
 *             array_result = []
 * 
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if segments > 1:
 */
            }

            /* "simdjson/csimdjson.pyx":417
 * 
 *                 iter.up()
 *             return array_result             # <<<<<<<<<<<<<<
 *         elif op == N_ARRAY_SINGLE:
 *             # We're fetchign a single element from an array.
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_INCREF(__pyx_v_array_result);
            __pyx_r = __pyx_v_array_result;
            goto __pyx_L0;

            /* "simdjson/csimdjson.pyx":395
 *                     iter.up()
 *                 return obj
 *         elif op == N_ARRAY:             # <<<<<<<<<<<<<<
 *             # We're fetching an entire array.
 *             array_result = []
 */
            break;
            case __pyx_e_8simdjson_9csimdjson_N_ARRAY_SINGLE:

            /* "simdjson/csimdjson.pyx":423
 *             # index requested doesn't exist in the list. This matches jq
 *             # behaviour.
 *             stop_index = int(v[0])             # <<<<<<<<<<<<<<
 *             if iter.down():
 *                 while True:
 */
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 423, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 423, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_stop_index = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "simdjson/csimdjson.pyx":424
 *             # behaviour.
 *             stop_index = int(v[0])
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if not current_index == stop_index:
 */
            __pyx_t_2 = (((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->down(__pyx_v_iter, 0) != 0);
            if (__pyx_t_2) {

              /* "simdjson/csimdjson.pyx":425
 *             stop_index = int(v[0])
 *             if iter.down():
 *                 while True:             # <<<<<<<<<<<<<<
 *                     if not current_index == stop_index:
 *                         current_index += 1
 */
              while (1) {

                /* "simdjson/csimdjson.pyx":426
 *             if iter.down():
 *                 while True:
 *                     if not current_index == stop_index:             # <<<<<<<<<<<<<<
 *                         current_index += 1
 * 
 */
                __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_current_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 426, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_v_stop_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 426, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 426, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_1 = ((!__pyx_t_2) != 0);
                if (__pyx_t_1) {

                  /* "simdjson/csimdjson.pyx":427
 *                 while True:
 *                     if not current_index == stop_index:
 *                         current_index += 1             # <<<<<<<<<<<<<<
 * 
 *                         if not iter.next():
 */
                  __pyx_v_current_index = (__pyx_v_current_index + 1);

                  /* "simdjson/csimdjson.pyx":429
 *                         current_index += 1
 * 
 *                         if not iter.next():             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  __pyx_t_1 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0) != 0)) != 0);
                  if (__pyx_t_1) {

                    /* "simdjson/csimdjson.pyx":430
 * 
 *                         if not iter.next():
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                         continue
 */
                    goto __pyx_L24_break;

                    /* "simdjson/csimdjson.pyx":429
 *                         current_index += 1
 * 
 *                         if not iter.next():             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  }

                  /* "simdjson/csimdjson.pyx":432
 *                             break
 * 
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if segments > 1:
 */
                  goto __pyx_L23_continue;

                  /* "simdjson/csimdjson.pyx":426
 *             if iter.down():
 *                 while True:
 *                     if not current_index == stop_index:             # <<<<<<<<<<<<<<
 *                         current_index += 1
 * 
 */
                }

                /* "simdjson/csimdjson.pyx":434
 *                         continue
 * 
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         obj = self._items(iter, parsed_query[1:])
 *                     else:
 */
                __pyx_t_1 = ((__pyx_v_segments > 1) != 0);
                if (__pyx_t_1) {

                  /* "simdjson/csimdjson.pyx":435
 * 
 *                     if segments > 1:
 *                         obj = self._items(iter, parsed_query[1:])             # <<<<<<<<<<<<<<
 *                     else:
 *                         obj = iter.to_obj()
 */
                  if (unlikely(__pyx_v_parsed_query == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(1, 435, __pyx_L1_error)
                  }
                  __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_v_parsed_query, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 435, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_3 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_3);
                  __pyx_t_3 = 0;

                  /* "simdjson/csimdjson.pyx":434
 *                         continue
 * 
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         obj = self._items(iter, parsed_query[1:])
 *                     else:
 */
                  goto __pyx_L27;
                }

                /* "simdjson/csimdjson.pyx":437
 *                         obj = self._items(iter, parsed_query[1:])
 *                     else:
 *                         obj = iter.to_obj()             # <<<<<<<<<<<<<<
 * 
 *                     break
 */
                /*else*/ {
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 437, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_4 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_4)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_4);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 437, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_3);
                  __pyx_t_3 = 0;
                }
                __pyx_L27:;

                /* "simdjson/csimdjson.pyx":439
 *                         obj = iter.to_obj()
 * 
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 iter.up()
 */
                goto __pyx_L24_break;
                __pyx_L23_continue:;
              }
              __pyx_L24_break:;

              /* "simdjson/csimdjson.pyx":441
 *                     break
 * 
 *                 iter.up()             # <<<<<<<<<<<<<<
 *             return obj
 *         elif op == N_ARRAY_SLICE:
 */
              (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->up(__pyx_v_iter, 0));

              /* "simdjson/csimdjson.pyx":424
 *             # behaviour.
 *             stop_index = int(v[0])
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if not current_index == stop_index:
 */
            }

            /* "simdjson/csimdjson.pyx":442
 * 
 *                 iter.up()
 *             return obj             # <<<<<<<<<<<<<<
 *         elif op == N_ARRAY_SLICE:
 *             # We're fetching an arbitrary slice from an array.
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_INCREF(__pyx_v_obj);
            __pyx_r = __pyx_v_obj;
            goto __pyx_L0;

            /* "simdjson/csimdjson.pyx":418
 *                 iter.up()
 *             return array_result
 *         elif op == N_ARRAY_SINGLE:             # <<<<<<<<<<<<<<
 *             # We're fetchign a single element from an array.
 *             # Returns None rather than the possibly-expected IndexError if the
 */
            break;
            case __pyx_e_8simdjson_9csimdjson_N_ARRAY_SLICE:

            /* "simdjson/csimdjson.pyx":445
 *         elif op == N_ARRAY_SLICE:
 *             # We're fetching an arbitrary slice from an array.
 *             start_index = 0 if not v[0] else int(v[0])             # <<<<<<<<<<<<<<
 *             stop_index = None if not v[1] else int(v[1])
 * 
 */
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 445, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 445, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (((!__pyx_t_1) != 0)) {
              __Pyx_INCREF(__pyx_int_0);
              __pyx_t_3 = __pyx_int_0;
            } else {
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 445, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 445, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_3 = __pyx_t_4;
              __pyx_t_4 = 0;
            }
            __pyx_v_start_index = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "simdjson/csimdjson.pyx":446
 *             # We're fetching an arbitrary slice from an array.
 *             start_index = 0 if not v[0] else int(v[0])
 *             stop_index = None if not v[1] else int(v[1])             # <<<<<<<<<<<<<<
 * 
 *             array_result = []
 */
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 446, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 446, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (((!__pyx_t_1) != 0)) {
              __Pyx_INCREF(Py_None);
              __pyx_t_3 = Py_None;
            } else {
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 446, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 446, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_3 = __pyx_t_5;
              __pyx_t_5 = 0;
            }
            __pyx_v_stop_index = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "simdjson/csimdjson.pyx":448
 *             stop_index = None if not v[1] else int(v[1])
 * 
 *             array_result = []             # <<<<<<<<<<<<<<
 * 
 *             if iter.down():
 */
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 448, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_v_array_result = ((PyObject*)__pyx_t_3);
            __pyx_t_3 = 0;

            /* "simdjson/csimdjson.pyx":450
 *             array_result = []
 * 
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 # Skip ahead to the first starting element. I believe we may be
 *                 # able to get this up to constant time by exposing a bit more
 */
            __pyx_t_1 = (((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->down(__pyx_v_iter, 0) != 0);
            if (__pyx_t_1) {

              /* "simdjson/csimdjson.pyx":455
 *                 # of the tape from the simdjson as long as we know the position
 *                 # where the current scope ends.
 *                 while current_index < start_index:             # <<<<<<<<<<<<<<
 *                     if not iter.next():
 *                         # We got to the end of the list and still didn't find
 */
              while (1) {
                __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_current_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 455, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_v_start_index, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 455, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 455, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                if (!__pyx_t_1) break;

                /* "simdjson/csimdjson.pyx":456
 *                 # where the current scope ends.
 *                 while current_index < start_index:
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         # We got to the end of the list and still didn't find
 *                         # the starting point.
 */
                __pyx_t_1 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0) != 0)) != 0);
                if (__pyx_t_1) {

                  /* "simdjson/csimdjson.pyx":459
 *                         # We got to the end of the list and still didn't find
 *                         # the starting point.
 *                         iter.up()             # <<<<<<<<<<<<<<
 *                         return array_result
 *                     current_index += 1
 */
                  (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->up(__pyx_v_iter, 0));

                  /* "simdjson/csimdjson.pyx":460
 *                         # the starting point.
 *                         iter.up()
 *                         return array_result             # <<<<<<<<<<<<<<
 *                     current_index += 1
 * 
 */
                  __Pyx_XDECREF(__pyx_r);
                  __Pyx_INCREF(__pyx_v_array_result);
                  __pyx_r = __pyx_v_array_result;
                  goto __pyx_L0;

                  /* "simdjson/csimdjson.pyx":456
 *                 # where the current scope ends.
 *                 while current_index < start_index:
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         # We got to the end of the list and still didn't find
 *                         # the starting point.
 */
                }

                /* "simdjson/csimdjson.pyx":461
 *                         iter.up()
 *                         return array_result
 *                     current_index += 1             # <<<<<<<<<<<<<<
 * 
 *                 while True:
 */
                __pyx_v_current_index = (__pyx_v_current_index + 1);
              }

              /* "simdjson/csimdjson.pyx":463
 *                     current_index += 1
 * 
 *                 while True:             # <<<<<<<<<<<<<<
 *                     if stop_index is not None:
 *                         if stop_index == current_index:
 */
              while (1) {

                /* "simdjson/csimdjson.pyx":464
 * 
 *                 while True:
 *                     if stop_index is not None:             # <<<<<<<<<<<<<<
 *                         if stop_index == current_index:
 *                             break
 */
                __pyx_t_1 = (__pyx_v_stop_index != Py_None);
                __pyx_t_2 = (__pyx_t_1 != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":465
 *                 while True:
 *                     if stop_index is not None:
 *                         if stop_index == current_index:             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_current_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 465, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_3 = PyObject_RichCompare(__pyx_v_stop_index, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 465, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 465, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (__pyx_t_2) {

                    /* "simdjson/csimdjson.pyx":466
 *                     if stop_index is not None:
 *                         if stop_index == current_index:
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                     if segments > 1:
 */
                    goto __pyx_L33_break;

                    /* "simdjson/csimdjson.pyx":465
 *                 while True:
 *                     if stop_index is not None:
 *                         if stop_index == current_index:             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
                  }

                  /* "simdjson/csimdjson.pyx":464
 * 
 *                 while True:
 *                     if stop_index is not None:             # <<<<<<<<<<<<<<
 *                         if stop_index == current_index:
 *                             break
 */
                }

                /* "simdjson/csimdjson.pyx":468
 *                             break
 * 
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         array_result.append(self._items(iter, parsed_query[1:]))
 *                     else:
 */
                __pyx_t_2 = ((__pyx_v_segments > 1) != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":469
 * 
 *                     if segments > 1:
 *                         array_result.append(self._items(iter, parsed_query[1:]))             # <<<<<<<<<<<<<<
 *                     else:
 *                         array_result.append(iter.to_obj())
 */
                  if (unlikely(__pyx_v_parsed_query == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(1, 469, __pyx_L1_error)
                  }
                  __pyx_t_3 = __Pyx_PyList_GetSlice(__pyx_v_parsed_query, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 469, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_5 = ((struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self->__pyx_vtab)->_items(__pyx_v_self, __pyx_v_iter, ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 469, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_array_result, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 469, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

                  /* "simdjson/csimdjson.pyx":468
 *                             break
 * 
 *                     if segments > 1:             # <<<<<<<<<<<<<<
 *                         array_result.append(self._items(iter, parsed_query[1:]))
 *                     else:
 */
                  goto __pyx_L36;
                }

                /* "simdjson/csimdjson.pyx":471
 *                         array_result.append(self._items(iter, parsed_query[1:]))
 *                     else:
 *                         array_result.append(iter.to_obj())             # <<<<<<<<<<<<<<
 * 
 *                     if not iter.next():
 */
                /*else*/ {
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iter), __pyx_n_s_to_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 471, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_4 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_4)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_4);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 471, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_array_result, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 471, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
                __pyx_L36:;

                /* "simdjson/csimdjson.pyx":473
 *                         array_result.append(iter.to_obj())
 * 
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->next(__pyx_v_iter, 0) != 0)) != 0);
                if (__pyx_t_2) {

                  /* "simdjson/csimdjson.pyx":474
 * 
 *                     if not iter.next():
 *                         break             # <<<<<<<<<<<<<<
 * 
 *                     current_index += 1
 */
                  goto __pyx_L33_break;

                  /* "simdjson/csimdjson.pyx":473
 *                         array_result.append(iter.to_obj())
 * 
 *                     if not iter.next():             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                }

                /* "simdjson/csimdjson.pyx":476
 *                         break
 * 
 *                     current_index += 1             # <<<<<<<<<<<<<<
 * 
 *                 iter.up()
 */
                __pyx_v_current_index = (__pyx_v_current_index + 1);
              }
              __pyx_L33_break:;

              /* "simdjson/csimdjson.pyx":478
 *                     current_index += 1
 * 
 *                 iter.up()             # <<<<<<<<<<<<<<
 *             return array_result
 * 
 */
              (void)(((struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator *)__pyx_v_iter->__pyx_vtab)->up(__pyx_v_iter, 0));

              /* "simdjson/csimdjson.pyx":450
 *             array_result = []
 * 
 *             if iter.down():             # <<<<<<<<<<<<<<
 *                 # Skip ahead to the first starting element. I believe we may be
 *                 # able to get this up to constant time by exposing a bit more
 */
            }

            /* "simdjson/csimdjson.pyx":479
 * 
 *                 iter.up()
 *             return array_result             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_INCREF(__pyx_v_array_result);
            __pyx_r = __pyx_v_array_result;
            goto __pyx_L0;

            /* "simdjson/csimdjson.pyx":443
 *                 iter.up()
 *             return obj
 *         elif op == N_ARRAY_SLICE:             # <<<<<<<<<<<<<<
 *             # We're fetching an arbitrary slice from an array.
 *             start_index = 0 if not v[0] else int(v[0])
 */
            break;
            default: break;
          }

          /* "simdjson/csimdjson.pyx":342
 *         return self.pj.isValid()
 * 
 *     cdef object _items(self, Iterator iter, list parsed_query):             # <<<<<<<<<<<<<<
 *         # TODO: Proof-of-concept, needs an optimization pass.
 *         if not parsed_query:
 */

          /* function exit code */
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L0;
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_6);
          __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson._items", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_obj);
          __Pyx_XDECREF(__pyx_v_array_result);
          __Pyx_XDECREF(__pyx_v_v);
          __Pyx_XDECREF(__pyx_v_stop_index);
          __Pyx_XDECREF(__pyx_v_start_index);
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_12__reduce_cython__[] = "ParsedJson.__reduce_cython__(self)";
        static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_12__reduce_cython__(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          __Pyx_RefNannySetupContext("__reduce_cython__", 0);

          /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 2, __pyx_L1_error)

          /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
        static char __pyx_doc_8simdjson_9csimdjson_10ParsedJson_14__setstate_cython__[] = "ParsedJson.__setstate_cython__(self, __pyx_state)";
        static PyObject *__pyx_pw_8simdjson_9csimdjson_10ParsedJson_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8simdjson_9csimdjson_10ParsedJson_14__setstate_cython__(((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8simdjson_9csimdjson_10ParsedJson_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          __Pyx_RefNannySetupContext("__setstate_cython__", 0);

          /* "(tree fragment)":4
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 4, __pyx_L1_error)

          /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("simdjson.csimdjson.ParsedJson.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "simdjson/csimdjson.pyx":482
 * 
 * 
 * def loads(s):             # <<<<<<<<<<<<<<
 *     """
 *     Deserialize and return the entire JSON object in `s` (bytes).
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8simdjson_9csimdjson_1loads(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
        static char __pyx_doc_8simdjson_9csimdjson_loads[] = "loads(s)\n\n    Deserialize and return the entire JSON object in `s` (bytes).\n\n    .. note::\n\n        Unlike the built-in Python `json.loads`, this method only\n        accepts byte strings, as simdjson will only work on encoded UTF-8.\n    ";
        static PyMethodDef __pyx_mdef_8simdjson_9csimdjson_1loads = {"loads", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_1loads, METH_O, __pyx_doc_8simdjson_9csimdjson_loads};
        static PyObject *__pyx_pw_8simdjson_9csimdjson_1loads(PyObject *__pyx_self, PyObject *__pyx_v_s) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("loads (wrapper)", 0);
          __pyx_r = __pyx_pf_8simdjson_9csimdjson_loads(__pyx_self, ((PyObject *)__pyx_v_s));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8simdjson_9csimdjson_loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          PyObject *__pyx_t_3 = NULL;
          __Pyx_RefNannySetupContext("loads", 0);

          /* "simdjson/csimdjson.pyx":491
 *         accepts byte strings, as simdjson will only work on encoded UTF-8.
 *     """
 *     return ParsedJson(s).to_obj()             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8simdjson_9csimdjson_ParsedJson), __pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "simdjson/csimdjson.pyx":482
 * 
 * 
 * def loads(s):             # <<<<<<<<<<<<<<
 *     """
 *     Deserialize and return the entire JSON object in `s` (bytes).
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_AddTraceback("simdjson.csimdjson.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "simdjson/csimdjson.pyx":495
 * 
 * 
 * cpdef list parse_query(query):             # <<<<<<<<<<<<<<
 *     """Parse a query string for use with :func:`~ParsedJson.items`.
 * 
 */

        static PyObject *__pyx_pw_8simdjson_9csimdjson_3parse_query(PyObject *__pyx_self, PyObject *__pyx_v_query); /*proto*/
        static PyObject *__pyx_f_8simdjson_9csimdjson_parse_query(PyObject *__pyx_v_query, CYTHON_UNUSED int __pyx_skip_dispatch) {
          int __pyx_v_current_state;
          int __pyx_v_current_op;
          PyObject *__pyx_v_result = 0;
          char *__pyx_v_c_query;
          char __pyx_v_c;
          PyObject *__pyx_v_buff = 0;
          PyObject *__pyx_v_slice_parts = NULL;
          PyObject *__pyx_v_current_slice = NULL;
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          PyObject *__pyx_t_3 = NULL;
          char *__pyx_t_4;
          char *__pyx_t_5;
          char *__pyx_t_6;
          char *__pyx_t_7;
          int __pyx_t_8;
          PyObject *__pyx_t_9 = NULL;
          int __pyx_t_10;
          char *__pyx_t_11;
          char *__pyx_t_12;
          char *__pyx_t_13;
          char *__pyx_t_14;
          int __pyx_t_15;
          PyObject *__pyx_t_16 = NULL;
          PyObject *__pyx_t_17 = NULL;
          int __pyx_t_18;
          __Pyx_RefNannySetupContext("parse_query", 0);
          __Pyx_INCREF(__pyx_v_query);

          /* "simdjson/csimdjson.pyx":521
 *     `."res[]\"lts"` would be perfectly valid.
 *     """
 *     cdef int current_state = Q_UNQUOTED             # <<<<<<<<<<<<<<
 *     cdef int current_op = N_NONE
 * 
 */
          __pyx_v_current_state = __pyx_e_8simdjson_9csimdjson_Q_UNQUOTED;

          /* "simdjson/csimdjson.pyx":522
 *     """
 *     cdef int current_state = Q_UNQUOTED
 *     cdef int current_op = N_NONE             # <<<<<<<<<<<<<<
 * 
 *     cdef list result = []
 */
          __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_NONE;

          /* "simdjson/csimdjson.pyx":524
 *     cdef int current_op = N_NONE
 * 
 *     cdef list result = []             # <<<<<<<<<<<<<<
 * 
 *     # A reference to the encoded string *must* be retained or we'll segfault
 */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 524, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_v_result = ((PyObject*)__pyx_t_1);
          __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":528
 *     # A reference to the encoded string *must* be retained or we'll segfault
 *     # when accessing c_query.
 *     query = query.encode('utf-8')             # <<<<<<<<<<<<<<
 *     cdef char* c_query = query
 *     cdef char c
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_query, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_utf_8);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF_SET(__pyx_v_query, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":529
 *     # when accessing c_query.
 *     query = query.encode('utf-8')
 *     cdef char* c_query = query             # <<<<<<<<<<<<<<
 *     cdef char c
 *     cdef bytearray buff = bytearray()
 */
          __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_query); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 529, __pyx_L1_error)
          __pyx_v_c_query = __pyx_t_4;

          /* "simdjson/csimdjson.pyx":531
 *     cdef char* c_query = query
 *     cdef char c
 *     cdef bytearray buff = bytearray()             # <<<<<<<<<<<<<<
 * 
 *     for c in c_query:
 */
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 531, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_v_buff = ((PyObject*)__pyx_t_1);
          __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":533
 *     cdef bytearray buff = bytearray()
 * 
 *     for c in c_query:             # <<<<<<<<<<<<<<
 *         if current_state == Q_UNQUOTED:
 *             # A regular character without any particular state.
 */
          __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_c_query); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 533, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyBytes_AS_STRING(__pyx_t_1);
          __pyx_t_6 = (__pyx_t_5 + PyBytes_GET_SIZE(__pyx_t_1));
          for (__pyx_t_7 = __pyx_t_5; __pyx_t_7 < __pyx_t_6; __pyx_t_7++) {
            __pyx_t_4 = __pyx_t_7;
            __pyx_v_c = (__pyx_t_4[0]);

            /* "simdjson/csimdjson.pyx":534
 * 
 *     for c in c_query:
 *         if current_state == Q_UNQUOTED:             # <<<<<<<<<<<<<<
 *             # A regular character without any particular state.
 *             if c == '.':
 */
            switch (__pyx_v_current_state) {
              case __pyx_e_8simdjson_9csimdjson_Q_UNQUOTED:

              /* "simdjson/csimdjson.pyx":536
 *         if current_state == Q_UNQUOTED:
 *             # A regular character without any particular state.
 *             if c == '.':             # <<<<<<<<<<<<<<
 *                 # Starting an object "get"
 *                 if current_op:
 */
              switch (__pyx_v_c) {
                case '.':

                /* "simdjson/csimdjson.pyx":538
 *             if c == '.':
 *                 # Starting an object "get"
 *                 if current_op:             # <<<<<<<<<<<<<<
 *                     result.append((
 *                         current_op,
 */
                __pyx_t_8 = (__pyx_v_current_op != 0);
                if (__pyx_t_8) {

                  /* "simdjson/csimdjson.pyx":540
 *                 if current_op:
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         bytes(buff)
 *                     ))
 */
                  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_current_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 540, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);

                  /* "simdjson/csimdjson.pyx":541
 *                     result.append((
 *                         current_op,
 *                         bytes(buff)             # <<<<<<<<<<<<<<
 *                     ))
 *                     del buff[:]
 */
                  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_buff); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 541, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);

                  /* "simdjson/csimdjson.pyx":540
 *                 if current_op:
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         bytes(buff)
 *                     ))
 */
                  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 540, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_2);
                  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
                  __Pyx_GIVEREF(__pyx_t_3);
                  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
                  __pyx_t_2 = 0;
                  __pyx_t_3 = 0;

                  /* "simdjson/csimdjson.pyx":539
 *                 # Starting an object "get"
 *                 if current_op:
 *                     result.append((             # <<<<<<<<<<<<<<
 *                         current_op,
 *                         bytes(buff)
 */
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 539, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                  /* "simdjson/csimdjson.pyx":543
 *                         bytes(buff)
 *                     ))
 *                     del buff[:]             # <<<<<<<<<<<<<<
 * 
 *                 current_op = N_GET
 */
                  if (__Pyx_PyObject_DelSlice(__pyx_v_buff, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(1, 543, __pyx_L1_error)

                  /* "simdjson/csimdjson.pyx":538
 *             if c == '.':
 *                 # Starting an object "get"
 *                 if current_op:             # <<<<<<<<<<<<<<
 *                     result.append((
 *                         current_op,
 */
                }

                /* "simdjson/csimdjson.pyx":545
 *                     del buff[:]
 * 
 *                 current_op = N_GET             # <<<<<<<<<<<<<<
 *             elif c == '[':
 *                 # Starting a new array subscript.
 */
                __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_GET;

                /* "simdjson/csimdjson.pyx":536
 *         if current_state == Q_UNQUOTED:
 *             # A regular character without any particular state.
 *             if c == '.':             # <<<<<<<<<<<<<<
 *                 # Starting an object "get"
 *                 if current_op:
 */
                break;
                case '[':

                /* "simdjson/csimdjson.pyx":548
 *             elif c == '[':
 *                 # Starting a new array subscript.
 *                 if current_op:             # <<<<<<<<<<<<<<
 *                     result.append((
 *                         current_op,
 */
                __pyx_t_8 = (__pyx_v_current_op != 0);
                if (__pyx_t_8) {

                  /* "simdjson/csimdjson.pyx":550
 *                 if current_op:
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         bytes(buff)
 *                     ))
 */
                  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_current_op); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 550, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);

                  /* "simdjson/csimdjson.pyx":551
 *                     result.append((
 *                         current_op,
 *                         bytes(buff)             # <<<<<<<<<<<<<<
 *                     ))
 *                     del buff[:]
 */
                  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_buff); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 551, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);

                  /* "simdjson/csimdjson.pyx":550
 *                 if current_op:
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         bytes(buff)
 *                     ))
 */
                  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 550, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_3);
                  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
                  __pyx_t_9 = 0;
                  __pyx_t_3 = 0;

                  /* "simdjson/csimdjson.pyx":549
 *                 # Starting a new array subscript.
 *                 if current_op:
 *                     result.append((             # <<<<<<<<<<<<<<
 *                         current_op,
 *                         bytes(buff)
 */
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_2); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 549, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "simdjson/csimdjson.pyx":553
 *                         bytes(buff)
 *                     ))
 *                     del buff[:]             # <<<<<<<<<<<<<<
 * 
 *                 current_op = N_ARRAY
 */
                  if (__Pyx_PyObject_DelSlice(__pyx_v_buff, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(1, 553, __pyx_L1_error)

                  /* "simdjson/csimdjson.pyx":548
 *             elif c == '[':
 *                 # Starting a new array subscript.
 *                 if current_op:             # <<<<<<<<<<<<<<
 *                     result.append((
 *                         current_op,
 */
                }

                /* "simdjson/csimdjson.pyx":555
 *                     del buff[:]
 * 
 *                 current_op = N_ARRAY             # <<<<<<<<<<<<<<
 *             elif c == ']':
 *                 # Ending an array subscript.
 */
                __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_ARRAY;

                /* "simdjson/csimdjson.pyx":546
 * 
 *                 current_op = N_GET
 *             elif c == '[':             # <<<<<<<<<<<<<<
 *                 # Starting a new array subscript.
 *                 if current_op:
 */
                break;
                case ']':

                /* "simdjson/csimdjson.pyx":558
 *             elif c == ']':
 *                 # Ending an array subscript.
 *                 if current_op != N_ARRAY:             # <<<<<<<<<<<<<<
 *                     raise ValueError('Stray ] in query string.')
 * 
 */
                __pyx_t_8 = ((__pyx_v_current_op != __pyx_e_8simdjson_9csimdjson_N_ARRAY) != 0);
                if (unlikely(__pyx_t_8)) {

                  /* "simdjson/csimdjson.pyx":559
 *                 # Ending an array subscript.
 *                 if current_op != N_ARRAY:
 *                     raise ValueError('Stray ] in query string.')             # <<<<<<<<<<<<<<
 * 
 *                 if buff:
 */
                  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 559, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __PYX_ERR(1, 559, __pyx_L1_error)

                  /* "simdjson/csimdjson.pyx":558
 *             elif c == ']':
 *                 # Ending an array subscript.
 *                 if current_op != N_ARRAY:             # <<<<<<<<<<<<<<
 *                     raise ValueError('Stray ] in query string.')
 * 
 */
                }

                /* "simdjson/csimdjson.pyx":561
 *                     raise ValueError('Stray ] in query string.')
 * 
 *                 if buff:             # <<<<<<<<<<<<<<
 *                     # A bit messy, but we want to be able to [eventually]
 *                     # provide better error messages on bad query strings, so we
 */
                __pyx_t_8 = (PyByteArray_GET_SIZE(__pyx_v_buff) != 0);
                if (__pyx_t_8) {

                  /* "simdjson/csimdjson.pyx":566
 *                     # need to actually go over everything rather than just
 *                     # .split().
 *                     current_op = N_ARRAY_SINGLE             # <<<<<<<<<<<<<<
 *                     slice_parts = []
 *                     current_slice = bytearray()
 */
                  __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_ARRAY_SINGLE;

                  /* "simdjson/csimdjson.pyx":567
 *                     # .split().
 *                     current_op = N_ARRAY_SINGLE
 *                     slice_parts = []             # <<<<<<<<<<<<<<
 *                     current_slice = bytearray()
 *                     for c in bytes(buff):
 */
                  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 567, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_XDECREF_SET(__pyx_v_slice_parts, ((PyObject*)__pyx_t_2));
                  __pyx_t_2 = 0;

                  /* "simdjson/csimdjson.pyx":568
 *                     current_op = N_ARRAY_SINGLE
 *                     slice_parts = []
 *                     current_slice = bytearray()             # <<<<<<<<<<<<<<
 *                     for c in bytes(buff):
 *                         if c >= 48 and c <= 57:
 */
                  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 568, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_XDECREF_SET(__pyx_v_current_slice, ((PyObject*)__pyx_t_2));
                  __pyx_t_2 = 0;

                  /* "simdjson/csimdjson.pyx":569
 *                     slice_parts = []
 *                     current_slice = bytearray()
 *                     for c in bytes(buff):             # <<<<<<<<<<<<<<
 *                         if c >= 48 and c <= 57:
 *                             # Simple nubmer
 */
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_buff); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 569, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_2);
                  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_2));
                  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
                    __pyx_t_11 = __pyx_t_14;
                    __pyx_v_c = (__pyx_t_11[0]);

                    /* "simdjson/csimdjson.pyx":570
 *                     current_slice = bytearray()
 *                     for c in bytes(buff):
 *                         if c >= 48 and c <= 57:             # <<<<<<<<<<<<<<
 *                             # Simple nubmer
 *                             current_slice.append(c)
 */
                    __pyx_t_15 = ((__pyx_v_c >= 48) != 0);
                    if (__pyx_t_15) {
                    } else {
                      __pyx_t_8 = __pyx_t_15;
                      goto __pyx_L12_bool_binop_done;
                    }
                    __pyx_t_15 = ((__pyx_v_c <= 57) != 0);
                    __pyx_t_8 = __pyx_t_15;
                    __pyx_L12_bool_binop_done:;
                    if (__pyx_t_8) {

                      /* "simdjson/csimdjson.pyx":572
 *                         if c >= 48 and c <= 57:
 *                             # Simple nubmer
 *                             current_slice.append(c)             # <<<<<<<<<<<<<<
 *                         elif c == 58:
 *                             # Slice delimiter [:]
 */
                      __pyx_t_10 = __Pyx_PyByteArray_Append(__pyx_v_current_slice, __pyx_v_c); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 572, __pyx_L1_error)

                      /* "simdjson/csimdjson.pyx":570
 *                     current_slice = bytearray()
 *                     for c in bytes(buff):
 *                         if c >= 48 and c <= 57:             # <<<<<<<<<<<<<<
 *                             # Simple nubmer
 *                             current_slice.append(c)
 */
                      goto __pyx_L11;
                    }

                    /* "simdjson/csimdjson.pyx":573
 *                             # Simple nubmer
 *                             current_slice.append(c)
 *                         elif c == 58:             # <<<<<<<<<<<<<<
 *                             # Slice delimiter [:]
 *                             slice_parts.append(bytes(current_slice))
 */
                    __pyx_t_8 = ((__pyx_v_c == 58) != 0);
                    if (likely(__pyx_t_8)) {

                      /* "simdjson/csimdjson.pyx":575
 *                         elif c == 58:
 *                             # Slice delimiter [:]
 *                             slice_parts.append(bytes(current_slice))             # <<<<<<<<<<<<<<
 *                             current_op = N_ARRAY_SLICE
 *                         else:
 */
                      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_current_slice); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 575, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_slice_parts, __pyx_t_3); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 575, __pyx_L1_error)
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "simdjson/csimdjson.pyx":576
 *                             # Slice delimiter [:]
 *                             slice_parts.append(bytes(current_slice))
 *                             current_op = N_ARRAY_SLICE             # <<<<<<<<<<<<<<
 *                         else:
 *                             raise ValueError(
 */
                      __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_ARRAY_SLICE;

                      /* "simdjson/csimdjson.pyx":573
 *                             # Simple nubmer
 *                             current_slice.append(c)
 *                         elif c == 58:             # <<<<<<<<<<<<<<
 *                             # Slice delimiter [:]
 *                             slice_parts.append(bytes(current_slice))
 */
                      goto __pyx_L11;
                    }

                    /* "simdjson/csimdjson.pyx":578
 *                             current_op = N_ARRAY_SLICE
 *                         else:
 *                             raise ValueError(             # <<<<<<<<<<<<<<
 *                                 'Do not know how to handle {0!r} in '
 *                                 'array subscript'.format(
 */
                    /*else*/ {

                      /* "simdjson/csimdjson.pyx":580
 *                             raise ValueError(
 *                                 'Do not know how to handle {0!r} in '
 *                                 'array subscript'.format(             # <<<<<<<<<<<<<<
 *                                     chr(c)
 *                                 )
 */
                      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Do_not_know_how_to_handle_0_r_in, __pyx_n_s_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 580, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_9);

                      /* "simdjson/csimdjson.pyx":581
 *                                 'Do not know how to handle {0!r} in '
 *                                 'array subscript'.format(
 *                                     chr(c)             # <<<<<<<<<<<<<<
 *                                 )
 *                             )
 */
                      __pyx_t_16 = __Pyx_PyInt_From_char(__pyx_v_c); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 581, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_17 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 581, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_16 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_9);
                        if (likely(__pyx_t_16)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                          __Pyx_INCREF(__pyx_t_16);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_9, function);
                        }
                      }
                      __pyx_t_3 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_16, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_17);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 580, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "simdjson/csimdjson.pyx":578
 *                             current_op = N_ARRAY_SLICE
 *                         else:
 *                             raise ValueError(             # <<<<<<<<<<<<<<
 *                                 'Do not know how to handle {0!r} in '
 *                                 'array subscript'.format(
 */
                      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 578, __pyx_L1_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __PYX_ERR(1, 578, __pyx_L1_error)
                    }
                    __pyx_L11:;
                  }
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "simdjson/csimdjson.pyx":585
 *                             )
 * 
 *                     if current_slice:             # <<<<<<<<<<<<<<
 *                         slice_parts.append(bytes(current_slice))
 * 
 */
                  __pyx_t_8 = (PyByteArray_GET_SIZE(__pyx_v_current_slice) != 0);
                  if (__pyx_t_8) {

                    /* "simdjson/csimdjson.pyx":586
 * 
 *                     if current_slice:
 *                         slice_parts.append(bytes(current_slice))             # <<<<<<<<<<<<<<
 * 
 *                     result.append((
 */
                    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_current_slice); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 586, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_slice_parts, __pyx_t_2); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 586, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                    /* "simdjson/csimdjson.pyx":585
 *                             )
 * 
 *                     if current_slice:             # <<<<<<<<<<<<<<
 *                         slice_parts.append(bytes(current_slice))
 * 
 */
                  }

                  /* "simdjson/csimdjson.pyx":589
 * 
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         slice_parts
 *                     ))
 */
                  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_current_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 589, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);

                  /* "simdjson/csimdjson.pyx":590
 *                     result.append((
 *                         current_op,
 *                         slice_parts             # <<<<<<<<<<<<<<
 *                     ))
 *                 else:
 */
                  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 589, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_2);
                  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
                  __Pyx_INCREF(__pyx_v_slice_parts);
                  __Pyx_GIVEREF(__pyx_v_slice_parts);
                  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_slice_parts);
                  __pyx_t_2 = 0;

                  /* "simdjson/csimdjson.pyx":588
 *                         slice_parts.append(bytes(current_slice))
 * 
 *                     result.append((             # <<<<<<<<<<<<<<
 *                         current_op,
 *                         slice_parts
 */
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 588, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                  /* "simdjson/csimdjson.pyx":561
 *                     raise ValueError('Stray ] in query string.')
 * 
 *                 if buff:             # <<<<<<<<<<<<<<
 *                     # A bit messy, but we want to be able to [eventually]
 *                     # provide better error messages on bad query strings, so we
 */
                  goto __pyx_L8;
                }

                /* "simdjson/csimdjson.pyx":593
 *                     ))
 *                 else:
 *                     result.append((             # <<<<<<<<<<<<<<
 *                         current_op,
 *                         None
 */
                /*else*/ {

                  /* "simdjson/csimdjson.pyx":594
 *                 else:
 *                     result.append((
 *                         current_op,             # <<<<<<<<<<<<<<
 *                         None
 *                     ))
 */
                  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_current_op); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 594, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);

                  /* "simdjson/csimdjson.pyx":595
 *                     result.append((
 *                         current_op,
 *                         None             # <<<<<<<<<<<<<<
 *                     ))
 * 
 */
                  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 594, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);
                  __Pyx_INCREF(Py_None);
                  __Pyx_GIVEREF(Py_None);
                  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
                  __pyx_t_9 = 0;

                  /* "simdjson/csimdjson.pyx":593
 *                     ))
 *                 else:
 *                     result.append((             # <<<<<<<<<<<<<<
 *                         current_op,
 *                         None
 */
                  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_2); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 593, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }
                __pyx_L8:;

                /* "simdjson/csimdjson.pyx":598
 *                     ))
 * 
 *                 del buff[:]             # <<<<<<<<<<<<<<
 *                 current_op = N_NONE
 *             elif c == '"':
 */
                if (__Pyx_PyObject_DelSlice(__pyx_v_buff, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(1, 598, __pyx_L1_error)

                /* "simdjson/csimdjson.pyx":599
 * 
 *                 del buff[:]
 *                 current_op = N_NONE             # <<<<<<<<<<<<<<
 *             elif c == '"':
 *                 # Start of a quoted string.
 */
                __pyx_v_current_op = __pyx_e_8simdjson_9csimdjson_N_NONE;

                /* "simdjson/csimdjson.pyx":556
 * 
 *                 current_op = N_ARRAY
 *             elif c == ']':             # <<<<<<<<<<<<<<
 *                 # Ending an array subscript.
 *                 if current_op != N_ARRAY:
 */
                break;
                case '"':

                /* "simdjson/csimdjson.pyx":602
 *             elif c == '"':
 *                 # Start of a quoted string.
 *                 current_state = Q_QUOTED             # <<<<<<<<<<<<<<
 *             else:
 *                 # Regular character with no special meaning.
 */
                __pyx_v_current_state = __pyx_e_8simdjson_9csimdjson_Q_QUOTED;

                /* "simdjson/csimdjson.pyx":600
 *                 del buff[:]
 *                 current_op = N_NONE
 *             elif c == '"':             # <<<<<<<<<<<<<<
 *                 # Start of a quoted string.
 *                 current_state = Q_QUOTED
 */
                break;
                default:

                /* "simdjson/csimdjson.pyx":605
 *             else:
 *                 # Regular character with no special meaning.
 *                 buff.append(c)             # <<<<<<<<<<<<<<
 *         elif current_state == Q_QUOTED:
 *             # Contents of a quoted string.
 */
                __pyx_t_10 = __Pyx_PyByteArray_Append(__pyx_v_buff, __pyx_v_c); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 605, __pyx_L1_error)
                break;
              }

              /* "simdjson/csimdjson.pyx":534
 * 
 *     for c in c_query:
 *         if current_state == Q_UNQUOTED:             # <<<<<<<<<<<<<<
 *             # A regular character without any particular state.
 *             if c == '.':
 */
              break;
              case __pyx_e_8simdjson_9csimdjson_Q_QUOTED:

              /* "simdjson/csimdjson.pyx":608
 *         elif current_state == Q_QUOTED:
 *             # Contents of a quoted string.
 *             if c == '\\':             # <<<<<<<<<<<<<<
 *                 # Found the start of an escape sequence.
 *                 current_state = Q_ESCAPE
 */
              switch (__pyx_v_c) {
                case '\\':

                /* "simdjson/csimdjson.pyx":610
 *             if c == '\\':
 *                 # Found the start of an escape sequence.
 *                 current_state = Q_ESCAPE             # <<<<<<<<<<<<<<
 *             elif c == '"':
 *                 # Found the end of a quoted string.
 */
                __pyx_v_current_state = __pyx_e_8simdjson_9csimdjson_Q_ESCAPE;

                /* "simdjson/csimdjson.pyx":608
 *         elif current_state == Q_QUOTED:
 *             # Contents of a quoted string.
 *             if c == '\\':             # <<<<<<<<<<<<<<
 *                 # Found the start of an escape sequence.
 *                 current_state = Q_ESCAPE
 */
                break;
                case '"':

                /* "simdjson/csimdjson.pyx":613
 *             elif c == '"':
 *                 # Found the end of a quoted string.
 *                 current_state = Q_UNQUOTED             # <<<<<<<<<<<<<<
 *             else:
 *                 buff.append(c)
 */
                __pyx_v_current_state = __pyx_e_8simdjson_9csimdjson_Q_UNQUOTED;

                /* "simdjson/csimdjson.pyx":611
 *                 # Found the start of an escape sequence.
 *                 current_state = Q_ESCAPE
 *             elif c == '"':             # <<<<<<<<<<<<<<
 *                 # Found the end of a quoted string.
 *                 current_state = Q_UNQUOTED
 */
                break;
                default:

                /* "simdjson/csimdjson.pyx":615
 *                 current_state = Q_UNQUOTED
 *             else:
 *                 buff.append(c)             # <<<<<<<<<<<<<<
 *         elif current_state == Q_ESCAPE:
 *             # Simple single-character escape sequences such as \" or \\
 */
                __pyx_t_10 = __Pyx_PyByteArray_Append(__pyx_v_buff, __pyx_v_c); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 615, __pyx_L1_error)
                break;
              }

              /* "simdjson/csimdjson.pyx":606
 *                 # Regular character with no special meaning.
 *                 buff.append(c)
 *         elif current_state == Q_QUOTED:             # <<<<<<<<<<<<<<
 *             # Contents of a quoted string.
 *             if c == '\\':
 */
              break;
              case __pyx_e_8simdjson_9csimdjson_Q_ESCAPE:

              /* "simdjson/csimdjson.pyx":618
 *         elif current_state == Q_ESCAPE:
 *             # Simple single-character escape sequences such as \" or \\
 *             buff.append(c)             # <<<<<<<<<<<<<<
 *             current_state = Q_ESCAPE if c == '\\' else Q_QUOTED
 * 
 */
              __pyx_t_10 = __Pyx_PyByteArray_Append(__pyx_v_buff, __pyx_v_c); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 618, __pyx_L1_error)

              /* "simdjson/csimdjson.pyx":619
 *             # Simple single-character escape sequences such as \" or \\
 *             buff.append(c)
 *             current_state = Q_ESCAPE if c == '\\' else Q_QUOTED             # <<<<<<<<<<<<<<
 * 
 *     if current_op:
 */
              if (((__pyx_v_c == '\\') != 0)) {
                __pyx_t_18 = __pyx_e_8simdjson_9csimdjson_Q_ESCAPE;
              } else {
                __pyx_t_18 = __pyx_e_8simdjson_9csimdjson_Q_QUOTED;
              }
              __pyx_v_current_state = __pyx_t_18;

              /* "simdjson/csimdjson.pyx":616
 *             else:
 *                 buff.append(c)
 *         elif current_state == Q_ESCAPE:             # <<<<<<<<<<<<<<
 *             # Simple single-character escape sequences such as \" or \\
 *             buff.append(c)
 */
              break;
              default: break;
            }
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "simdjson/csimdjson.pyx":621
 *             current_state = Q_ESCAPE if c == '\\' else Q_QUOTED
 * 
 *     if current_op:             # <<<<<<<<<<<<<<
 *         result.append((
 *             current_op,
 */
          __pyx_t_8 = (__pyx_v_current_op != 0);
          if (__pyx_t_8) {

            /* "simdjson/csimdjson.pyx":623
 *     if current_op:
 *         result.append((
 *             current_op,             # <<<<<<<<<<<<<<
 *             bytes(buff)
 *         ))
 */
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_current_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);

            /* "simdjson/csimdjson.pyx":624
 *         result.append((
 *             current_op,
 *             bytes(buff)             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_buff); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);

            /* "simdjson/csimdjson.pyx":623
 *     if current_op:
 *         result.append((
 *             current_op,             # <<<<<<<<<<<<<<
 *             bytes(buff)
 *         ))
 */
            __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 623, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
            __pyx_t_1 = 0;
            __pyx_t_2 = 0;

            /* "simdjson/csimdjson.pyx":622
 * 
 *     if current_op:
 *         result.append((             # <<<<<<<<<<<<<<
 *             current_op,
 *             bytes(buff)
 */
            __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 622, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

            /* "simdjson/csimdjson.pyx":621
 *             current_state = Q_ESCAPE if c == '\\' else Q_QUOTED
 * 
 *     if current_op:             # <<<<<<<<<<<<<<
 *         result.append((
 *             current_op,
 */
          }

          /* "simdjson/csimdjson.pyx":627
 *         ))
 * 
 *     return result             # <<<<<<<<<<<<<<
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_result);
          __pyx_r = __pyx_v_result;
          goto __pyx_L0;

          /* "simdjson/csimdjson.pyx":495
 * 
 * 
 * cpdef list parse_query(query):             # <<<<<<<<<<<<<<
 *     """Parse a query string for use with :func:`~ParsedJson.items`.
 * 
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_16);
          __Pyx_XDECREF(__pyx_t_17);
          __Pyx_AddTraceback("simdjson.csimdjson.parse_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_result);
          __Pyx_XDECREF(__pyx_v_buff);
          __Pyx_XDECREF(__pyx_v_slice_parts);
          __Pyx_XDECREF(__pyx_v_current_slice);
          __Pyx_XDECREF(__pyx_v_query);
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* Python wrapper */
        static PyObject *__pyx_pw_8simdjson_9csimdjson_3parse_query(PyObject *__pyx_self, PyObject *__pyx_v_query); /*proto*/
        static char __pyx_doc_8simdjson_9csimdjson_2parse_query[] = "parse_query(query) -> list\nParse a query string for use with :func:`~ParsedJson.items`.\n\n    Returns a list in the form of `[(<op>, <value>), ...]`.\n\n        .. note::\n\n            This is exposed to Python solely for testing. A typical application\n            will never need to call this method.\n\n\n    This method is...interesting. It decomposes a sorta-jq query string into\n    a list of actions. For example, given the query `.results[].valid` it will\n    be decomposed into:\n\n        .. code-block:: python\n\n            [\n                [Q_GET, \"results\"],\n                [Q_ARRAY, \"\"],\n                [Q_GET, \"valid\"]\n            ]\n\n    If you need to use a field name that contains `[` or `.`, just quote it.\n    `.\"res[]\"lts\"` would be perfectly valid.\n    ";
        static PyObject *__pyx_pw_8simdjson_9csimdjson_3parse_query(PyObject *__pyx_self, PyObject *__pyx_v_query) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("parse_query (wrapper)", 0);
          __pyx_r = __pyx_pf_8simdjson_9csimdjson_2parse_query(__pyx_self, ((PyObject *)__pyx_v_query));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8simdjson_9csimdjson_2parse_query(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_query) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          __Pyx_RefNannySetupContext("parse_query", 0);
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8simdjson_9csimdjson_parse_query(__pyx_v_query, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("simdjson.csimdjson.parse_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }
        static struct __pyx_vtabstruct_8simdjson_9csimdjson_Iterator __pyx_vtable_8simdjson_9csimdjson_Iterator;

        static PyObject *__pyx_tp_new_8simdjson_9csimdjson_Iterator(PyTypeObject *t, PyObject *a, PyObject *k) {
          struct __pyx_obj_8simdjson_9csimdjson_Iterator *p;
          PyObject *o;
          if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
            o = (*t->tp_alloc)(t, 0);
          } else {
            o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
          }
          if (unlikely(!o)) return 0;
          p = ((struct __pyx_obj_8simdjson_9csimdjson_Iterator *)o);
          p->__pyx_vtab = __pyx_vtabptr_8simdjson_9csimdjson_Iterator;
          if (unlikely(__pyx_pw_8simdjson_9csimdjson_8Iterator_1__cinit__(o, a, k) < 0)) goto bad;
          return o;
          bad:
          Py_DECREF(o); o = 0;
          return NULL;
        }

        static void __pyx_tp_dealloc_8simdjson_9csimdjson_Iterator(PyObject *o) {
          #if CYTHON_USE_TP_FINALIZE
          if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
            if (PyObject_CallFinalizerFromDealloc(o)) return;
          }
          #endif
          {
            PyObject *etype, *eval, *etb;
            PyErr_Fetch(&etype, &eval, &etb);
            ++Py_REFCNT(o);
            __pyx_pw_8simdjson_9csimdjson_8Iterator_3__dealloc__(o);
            --Py_REFCNT(o);
            PyErr_Restore(etype, eval, etb);
          }
          (*Py_TYPE(o)->tp_free)(o);
        }

        static PyMethodDef __pyx_methods_8simdjson_9csimdjson_Iterator[] = {
          {"isOk", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_5isOk, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_4isOk},
          {"prev", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_7prev, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_6prev},
          {"next", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_9next, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_8next},
          {"down", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_11down, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_10down},
          {"up", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_13up, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_12up},
          {"move_to_key", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_15move_to_key, METH_O, __pyx_doc_8simdjson_9csimdjson_8Iterator_14move_to_key},
          {"move_forward", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_17move_forward, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_16move_forward},
          {"to_start_scope", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_19to_start_scope, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_18to_start_scope},
          {"get_type", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_21get_type, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_20get_type},
          {"get_tape_location", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_23get_tape_location, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_22get_tape_location},
          {"get_tape_length", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_25get_tape_length, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_24get_tape_length},
          {"get_depth", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_27get_depth, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_26get_depth},
          {"get_scope_type", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_29get_scope_type, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_28get_scope_type},
          {"is_object_or_array", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_31is_object_or_array, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_30is_object_or_array},
          {"is_object", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_33is_object, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_32is_object},
          {"is_array", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_35is_array, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_34is_array},
          {"is_string", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_37is_string, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_36is_string},
          {"is_integer", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_39is_integer, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_38is_integer},
          {"is_double", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_41is_double, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_40is_double},
          {"get_double", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_43get_double, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_42get_double},
          {"get_integer", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_45get_integer, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_44get_integer},
          {"get_string", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_47get_string, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_46get_string},
          {"to_obj", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_49to_obj, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_48to_obj},
          {"__reduce_cython__", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_51__reduce_cython__, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_8Iterator_50__reduce_cython__},
          {"__setstate_cython__", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_8Iterator_53__setstate_cython__, METH_O, __pyx_doc_8simdjson_9csimdjson_8Iterator_52__setstate_cython__},
          {0, 0, 0, 0}
        };

        static PyTypeObject __pyx_type_8simdjson_9csimdjson_Iterator = {
          PyVarObject_HEAD_INIT(0, 0)
          "simdjson.csimdjson.Iterator", /*tp_name*/
          sizeof(struct __pyx_obj_8simdjson_9csimdjson_Iterator), /*tp_basicsize*/
          0, /*tp_itemsize*/
          __pyx_tp_dealloc_8simdjson_9csimdjson_Iterator, /*tp_dealloc*/
          0, /*tp_print*/
          0, /*tp_getattr*/
          0, /*tp_setattr*/
          #if PY_MAJOR_VERSION < 3
          0, /*tp_compare*/
          #endif
          #if PY_MAJOR_VERSION >= 3
          0, /*tp_as_async*/
          #endif
          0, /*tp_repr*/
          0, /*tp_as_number*/
          0, /*tp_as_sequence*/
          0, /*tp_as_mapping*/
          0, /*tp_hash*/
          0, /*tp_call*/
          0, /*tp_str*/
          0, /*tp_getattro*/
          0, /*tp_setattro*/
          0, /*tp_as_buffer*/
          Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
          "A wrapper around the interal simdjson ParsedJson::iterator\n    object.\n\n    Typically, it's only useful to use this object if you have very specific\n    needs, such as handling JSON with duplicate keys.\n\n        .. note::\n\n            This is a _very_ thin wrapper around the underlying simdjson\n            structures. This means that it is possible for this interface to\n            change between versions. If you depend on this, you should pin the\n            version of simdjson you are using until you can confirm that the\n            update works (which is just good practice in general!).\n\n            High-level interfaces like :func:`~loads()` and\n            :func:`~ParsedJson.items()` are reliable and will always be\n            available.\n\n    ", /*tp_doc*/
          0, /*tp_traverse*/
          0, /*tp_clear*/
          0, /*tp_richcompare*/
          0, /*tp_weaklistoffset*/
          0, /*tp_iter*/
          0, /*tp_iternext*/
          __pyx_methods_8simdjson_9csimdjson_Iterator, /*tp_methods*/
          0, /*tp_members*/
          0, /*tp_getset*/
          0, /*tp_base*/
          0, /*tp_dict*/
          0, /*tp_descr_get*/
          0, /*tp_descr_set*/
          0, /*tp_dictoffset*/
          0, /*tp_init*/
          0, /*tp_alloc*/
          __pyx_tp_new_8simdjson_9csimdjson_Iterator, /*tp_new*/
          0, /*tp_free*/
          0, /*tp_is_gc*/
          0, /*tp_bases*/
          0, /*tp_mro*/
          0, /*tp_cache*/
          0, /*tp_subclasses*/
          0, /*tp_weaklist*/
          0, /*tp_del*/
          0, /*tp_version_tag*/
          #if PY_VERSION_HEX >= 0x030400a1
          0, /*tp_finalize*/
          #endif
        };
        static struct __pyx_vtabstruct_8simdjson_9csimdjson_ParsedJson __pyx_vtable_8simdjson_9csimdjson_ParsedJson;

        static PyObject *__pyx_tp_new_8simdjson_9csimdjson_ParsedJson(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
          struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *p;
          PyObject *o;
          if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
            o = (*t->tp_alloc)(t, 0);
          } else {
            o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
          }
          if (unlikely(!o)) return 0;
          p = ((struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)o);
          p->__pyx_vtab = __pyx_vtabptr_8simdjson_9csimdjson_ParsedJson;
          new((void*)&(p->pj)) ParsedJson();
          return o;
        }

        static void __pyx_tp_dealloc_8simdjson_9csimdjson_ParsedJson(PyObject *o) {
          struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *p = (struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *)o;
          #if CYTHON_USE_TP_FINALIZE
          if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
            if (PyObject_CallFinalizerFromDealloc(o)) return;
          }
          #endif
          __Pyx_call_destructor(p->pj);
          (*Py_TYPE(o)->tp_free)(o);
        }

        static PyMethodDef __pyx_methods_8simdjson_9csimdjson_ParsedJson[] = {
          {"allocate_capacity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_3allocate_capacity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_2allocate_capacity},
          {"parse", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_5parse, METH_O, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_4parse},
          {"to_obj", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_7to_obj, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_6to_obj},
          {"items", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_9items, METH_O, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_8items},
          {"is_valid", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_11is_valid, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_10is_valid},
          {"__reduce_cython__", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_13__reduce_cython__, METH_NOARGS, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_12__reduce_cython__},
          {"__setstate_cython__", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_10ParsedJson_15__setstate_cython__, METH_O, __pyx_doc_8simdjson_9csimdjson_10ParsedJson_14__setstate_cython__},
          {0, 0, 0, 0}
        };

        static PyTypeObject __pyx_type_8simdjson_9csimdjson_ParsedJson = {
          PyVarObject_HEAD_INIT(0, 0)
          "simdjson.csimdjson.ParsedJson", /*tp_name*/
          sizeof(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson), /*tp_basicsize*/
          0, /*tp_itemsize*/
          __pyx_tp_dealloc_8simdjson_9csimdjson_ParsedJson, /*tp_dealloc*/
          0, /*tp_print*/
          0, /*tp_getattr*/
          0, /*tp_setattr*/
          #if PY_MAJOR_VERSION < 3
          0, /*tp_compare*/
          #endif
          #if PY_MAJOR_VERSION >= 3
          0, /*tp_as_async*/
          #endif
          0, /*tp_repr*/
          0, /*tp_as_number*/
          0, /*tp_as_sequence*/
          0, /*tp_as_mapping*/
          0, /*tp_hash*/
          0, /*tp_call*/
          0, /*tp_str*/
          0, /*tp_getattro*/
          0, /*tp_setattro*/
          0, /*tp_as_buffer*/
          Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
          "ParsedJson(source=None)\nLow-level wrapper for simdjson.\n\n    Providing a `source` document is a shortcut for calling\n    :func:`~ParsedJson.allocate_capacity()` and :func:`~ParsedJson.parse()`.\n    ", /*tp_doc*/
          0, /*tp_traverse*/
          0, /*tp_clear*/
          0, /*tp_richcompare*/
          0, /*tp_weaklistoffset*/
          0, /*tp_iter*/
          0, /*tp_iternext*/
          __pyx_methods_8simdjson_9csimdjson_ParsedJson, /*tp_methods*/
          0, /*tp_members*/
          0, /*tp_getset*/
          0, /*tp_base*/
          0, /*tp_dict*/
          0, /*tp_descr_get*/
          0, /*tp_descr_set*/
          0, /*tp_dictoffset*/
          __pyx_pw_8simdjson_9csimdjson_10ParsedJson_1__init__, /*tp_init*/
          0, /*tp_alloc*/
          __pyx_tp_new_8simdjson_9csimdjson_ParsedJson, /*tp_new*/
          0, /*tp_free*/
          0, /*tp_is_gc*/
          0, /*tp_bases*/
          0, /*tp_mro*/
          0, /*tp_cache*/
          0, /*tp_subclasses*/
          0, /*tp_weaklist*/
          0, /*tp_del*/
          0, /*tp_version_tag*/
          #if PY_VERSION_HEX >= 0x030400a1
          0, /*tp_finalize*/
          #endif
        };

        static PyMethodDef __pyx_methods[] = {
          {"parse_query", (PyCFunction)__pyx_pw_8simdjson_9csimdjson_3parse_query, METH_O, __pyx_doc_8simdjson_9csimdjson_2parse_query},
          {0, 0, 0, 0}
        };

        #if PY_MAJOR_VERSION >= 3
        #if CYTHON_PEP489_MULTI_PHASE_INIT
        static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
        static int __pyx_pymod_exec_csimdjson(PyObject* module); /*proto*/
        static PyModuleDef_Slot __pyx_moduledef_slots[] = {
          {Py_mod_create, (void*)__pyx_pymod_create},
          {Py_mod_exec, (void*)__pyx_pymod_exec_csimdjson},
          {0, NULL}
        };
        #endif

        static struct PyModuleDef __pyx_moduledef = {
            PyModuleDef_HEAD_INIT,
            "csimdjson",
            0, /* m_doc */
          #if CYTHON_PEP489_MULTI_PHASE_INIT
            0, /* m_size */
          #else
            -1, /* m_size */
          #endif
            __pyx_methods /* m_methods */,
          #if CYTHON_PEP489_MULTI_PHASE_INIT
            __pyx_moduledef_slots, /* m_slots */
          #else
            NULL, /* m_reload */
          #endif
            NULL, /* m_traverse */
            NULL, /* m_clear */
            NULL /* m_free */
        };
        #endif
        #ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Do_not_know_how_to_handle_0_r_in, __pyx_k_Do_not_know_how_to_handle_0_r_in, sizeof(__pyx_k_Do_not_know_how_to_handle_0_r_in), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_iterating_over_document, __pyx_k_Error_iterating_over_document, sizeof(__pyx_k_Error_iterating_over_document), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_parsing_document, __pyx_k_Error_parsing_document, sizeof(__pyx_k_Error_parsing_document), 0, 0, 1, 0},
  {&__pyx_n_s_Iterator, __pyx_k_Iterator, sizeof(__pyx_k_Iterator), 0, 0, 1, 1},
  {&__pyx_n_s_JSONDecodeError, __pyx_k_JSONDecodeError, sizeof(__pyx_k_JSONDecodeError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_ParsedJson, __pyx_k_ParsedJson, sizeof(__pyx_k_ParsedJson), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Stray_in_query_string, __pyx_k_Stray_in_query_string, sizeof(__pyx_k_Stray_in_query_string), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_b__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 0, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_n_s_allocate_capacity, __pyx_k_allocate_capacity, sizeof(__pyx_k_allocate_capacity), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_down, __pyx_k_down, sizeof(__pyx_k_down), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_depth, __pyx_k_get_depth, sizeof(__pyx_k_get_depth), 0, 0, 1, 1},
  {&__pyx_n_s_get_double, __pyx_k_get_double, sizeof(__pyx_k_get_double), 0, 0, 1, 1},
  {&__pyx_n_s_get_integer, __pyx_k_get_integer, sizeof(__pyx_k_get_integer), 0, 0, 1, 1},
  {&__pyx_n_s_get_scope_type, __pyx_k_get_scope_type, sizeof(__pyx_k_get_scope_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_string, __pyx_k_get_string, sizeof(__pyx_k_get_string), 0, 0, 1, 1},
  {&__pyx_n_s_get_tape_length, __pyx_k_get_tape_length, sizeof(__pyx_k_get_tape_length), 0, 0, 1, 1},
  {&__pyx_n_s_get_tape_location, __pyx_k_get_tape_location, sizeof(__pyx_k_get_tape_location), 0, 0, 1, 1},
  {&__pyx_n_s_get_type, __pyx_k_get_type, sizeof(__pyx_k_get_type), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_isOk, __pyx_k_isOk, sizeof(__pyx_k_isOk), 0, 0, 1, 1},
  {&__pyx_n_s_is_array, __pyx_k_is_array, sizeof(__pyx_k_is_array), 0, 0, 1, 1},
  {&__pyx_n_s_is_double, __pyx_k_is_double, sizeof(__pyx_k_is_double), 0, 0, 1, 1},
  {&__pyx_n_s_is_integer, __pyx_k_is_integer, sizeof(__pyx_k_is_integer), 0, 0, 1, 1},
  {&__pyx_n_s_is_object, __pyx_k_is_object, sizeof(__pyx_k_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_is_object_or_array, __pyx_k_is_object_or_array, sizeof(__pyx_k_is_object_or_array), 0, 0, 1, 1},
  {&__pyx_n_s_is_string, __pyx_k_is_string, sizeof(__pyx_k_is_string), 0, 0, 1, 1},
  {&__pyx_n_s_is_valid, __pyx_k_is_valid, sizeof(__pyx_k_is_valid), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_depth, __pyx_k_max_depth, sizeof(__pyx_k_max_depth), 0, 0, 1, 1},
  {&__pyx_n_s_move_forward, __pyx_k_move_forward, sizeof(__pyx_k_move_forward), 0, 0, 1, 1},
  {&__pyx_n_s_move_to_key, __pyx_k_move_to_key, sizeof(__pyx_k_move_to_key), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {&__pyx_n_s_pj, __pyx_k_pj, sizeof(__pyx_k_pj), 0, 0, 1, 1},
  {&__pyx_n_s_prev, __pyx_k_prev, sizeof(__pyx_k_prev), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_self_pj_cannot_be_converted_to_a, __pyx_k_self_pj_cannot_be_converted_to_a, sizeof(__pyx_k_self_pj_cannot_be_converted_to_a), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_simdjson_csimdjson, __pyx_k_simdjson_csimdjson, sizeof(__pyx_k_simdjson_csimdjson), 0, 0, 1, 1},
  {&__pyx_kp_s_simdjson_csimdjson_pyx, __pyx_k_simdjson_csimdjson_pyx, sizeof(__pyx_k_simdjson_csimdjson_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_simdjson_requires_AVX2_support_h, __pyx_k_simdjson_requires_AVX2_support_h, sizeof(__pyx_k_simdjson_requires_AVX2_support_h), 0, 0, 1, 0},
  {&__pyx_kp_s_simdjson_requires_AVX2_support_w, __pyx_k_simdjson_requires_AVX2_support_w, sizeof(__pyx_k_simdjson_requires_AVX2_support_w), 0, 0, 1, 0},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_obj, __pyx_k_to_obj, sizeof(__pyx_k_to_obj), 0, 0, 1, 1},
  {&__pyx_n_s_to_start_scope, __pyx_k_to_start_scope, sizeof(__pyx_k_to_start_scope), 0, 0, 1, 1},
  {&__pyx_n_s_up, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_7, __pyx_k_utf_7, sizeof(__pyx_k_utf_7), 0, 0, 1, 0},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 251, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 264, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 559, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(1, 581, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "simdjson/csimdjson.pyx":251
 *         avx2 = can_use_avx2()
 *         if avx2 == -1:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'simdjson requires AVX2 support, however it has not been'
 *                 ' enabled by your operating system.'
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_simdjson_requires_AVX2_support_h); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "simdjson/csimdjson.pyx":256
 *             )
 *         elif avx2 == 0:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'simdjson requires AVX2 support, which is not provided by'
 *                 ' your processor.'
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_simdjson_requires_AVX2_support_w); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "simdjson/csimdjson.pyx":297
 *         if not iter.isOk():
 *             # Prooooably not the right exception
 *             raise JSONDecodeError('Error iterating over document', '', 0)             # <<<<<<<<<<<<<<
 *         return iter.to_obj()
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(3, __pyx_kp_s_Error_iterating_over_document, __pyx_kp_s__6, __pyx_int_0); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_pj_cannot_be_converted_to_a); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_pj_cannot_be_converted_to_a); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "simdjson/csimdjson.pyx":559
 *                 # Ending an array subscript.
 *                 if current_op != N_ARRAY:
 *                     raise ValueError('Stray ] in query string.')             # <<<<<<<<<<<<<<
 * 
 *                 if buff:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Stray_in_query_string); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "simdjson/csimdjson.pyx":482
 * 
 * 
 * def loads(s):             # <<<<<<<<<<<<<<
 *     """
 *     Deserialize and return the entire JSON object in `s` (bytes).
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_s); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_simdjson_csimdjson_pyx, __pyx_n_s_loads, 482, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8simdjson_9csimdjson_Iterator = &__pyx_vtable_8simdjson_9csimdjson_Iterator;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.isOk = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_isOk;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.prev = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_prev;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.next = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_next;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.down = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_down;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.up = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_up;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.move_to_key = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, char const *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_move_to_key;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.move_forward = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_move_forward;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.to_start_scope = (void (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_to_start_scope;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_type = (uint8_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_type;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_tape_location = (size_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_location;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_tape_length = (size_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_tape_length;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_depth = (size_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_depth;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_scope_type = (size_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_scope_type;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_object_or_array = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_object_or_array;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_object = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_object;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_array = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_array;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_string = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_string;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_integer = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_integer;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.is_double = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_is_double;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_double = (double (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_double;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_integer = (int64_t (*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_integer;
  __pyx_vtable_8simdjson_9csimdjson_Iterator.get_string = (PyObject *(*)(struct __pyx_obj_8simdjson_9csimdjson_Iterator *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_8Iterator_get_string;
  if (PyType_Ready(&__pyx_type_8simdjson_9csimdjson_Iterator) < 0) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_type_8simdjson_9csimdjson_Iterator.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8simdjson_9csimdjson_Iterator.tp_dictoffset && __pyx_type_8simdjson_9csimdjson_Iterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8simdjson_9csimdjson_Iterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8simdjson_9csimdjson_Iterator.tp_dict, __pyx_vtabptr_8simdjson_9csimdjson_Iterator) < 0) __PYX_ERR(1, 83, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Iterator, (PyObject *)&__pyx_type_8simdjson_9csimdjson_Iterator) < 0) __PYX_ERR(1, 83, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8simdjson_9csimdjson_Iterator) < 0) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_ptype_8simdjson_9csimdjson_Iterator = &__pyx_type_8simdjson_9csimdjson_Iterator;
  __pyx_vtabptr_8simdjson_9csimdjson_ParsedJson = &__pyx_vtable_8simdjson_9csimdjson_ParsedJson;
  __pyx_vtable_8simdjson_9csimdjson_ParsedJson.is_valid = (bool (*)(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *, int __pyx_skip_dispatch))__pyx_f_8simdjson_9csimdjson_10ParsedJson_is_valid;
  __pyx_vtable_8simdjson_9csimdjson_ParsedJson._items = (PyObject *(*)(struct __pyx_obj_8simdjson_9csimdjson_ParsedJson *, struct __pyx_obj_8simdjson_9csimdjson_Iterator *, PyObject *))__pyx_f_8simdjson_9csimdjson_10ParsedJson__items;
  if (PyType_Ready(&__pyx_type_8simdjson_9csimdjson_ParsedJson) < 0) __PYX_ERR(1, 240, __pyx_L1_error)
  __pyx_type_8simdjson_9csimdjson_ParsedJson.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8simdjson_9csimdjson_ParsedJson.tp_dictoffset && __pyx_type_8simdjson_9csimdjson_ParsedJson.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8simdjson_9csimdjson_ParsedJson.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8simdjson_9csimdjson_ParsedJson.tp_dict, __pyx_vtabptr_8simdjson_9csimdjson_ParsedJson) < 0) __PYX_ERR(1, 240, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParsedJson, (PyObject *)&__pyx_type_8simdjson_9csimdjson_ParsedJson) < 0) __PYX_ERR(1, 240, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8simdjson_9csimdjson_ParsedJson) < 0) __PYX_ERR(1, 240, __pyx_L1_error)
  __pyx_ptype_8simdjson_9csimdjson_ParsedJson = &__pyx_type_8simdjson_9csimdjson_ParsedJson;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcsimdjson(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcsimdjson(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_csimdjson(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_csimdjson(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_csimdjson(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'csimdjson' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_csimdjson(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("csimdjson", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_simdjson__csimdjson) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "simdjson.csimdjson")) {
      if (unlikely(PyDict_SetItemString(modules, "simdjson.csimdjson", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "simdjson/csimdjson.pyx":2
 * # cython: language_level=2
 * from json import JSONDecodeError             # <<<<<<<<<<<<<<
 * from cpython.dict cimport PyDict_SetItem
 * from libc.string cimport strcmp
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_JSONDecodeError);
  __Pyx_GIVEREF(__pyx_n_s_JSONDecodeError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_JSONDecodeError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_json, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_JSONDecodeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_JSONDecodeError, __pyx_t_1) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "simdjson/csimdjson.pyx":9
 * 
 * # Maximum default depth used when allocating capacity.
 * cdef int DEFAULT_MAX_DEPTH = 1024             # <<<<<<<<<<<<<<
 * 
 * # State machine states for parsing item() query strings.
 */
  __pyx_v_8simdjson_9csimdjson_DEFAULT_MAX_DEPTH = 0x400;

  /* "simdjson/csimdjson.pyx":275
 *                 )
 * 
 *     def allocate_capacity(self, size, max_depth=DEFAULT_MAX_DEPTH):             # <<<<<<<<<<<<<<
 *         """Resize the document buffer to `size` bytes."""
 *         return self.pj.allocateCapacity(size, max_depth)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_8simdjson_9csimdjson_DEFAULT_MAX_DEPTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__5 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "simdjson/csimdjson.pyx":482
 * 
 * 
 * def loads(s):             # <<<<<<<<<<<<<<
 *     """
 *     Deserialize and return the entire JSON object in `s` (bytes).
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8simdjson_9csimdjson_1loads, NULL, __pyx_n_s_simdjson_csimdjson); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_loads, __pyx_t_2) < 0) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "simdjson/csimdjson.pyx":1
 * # cython: language_level=2             # <<<<<<<<<<<<<<
 * from json import JSONDecodeError
 * from cpython.dict cimport PyDict_SetItem
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init simdjson.csimdjson", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init simdjson.csimdjson");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return dict ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
        dictptr = (offset > 0) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (!dict || tp_dict_version != __PYX_GET_DICT_VERSION(dict))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* ByteArrayAppend */
static CYTHON_INLINE int __Pyx_PyByteArray_Append(PyObject* bytearray, int value) {
    PyObject *pyval, *retval;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_is_valid_index(value, 256))) {
        Py_ssize_t n = Py_SIZE(bytearray);
        if (likely(n != PY_SSIZE_T_MAX)) {
            if (unlikely(PyByteArray_Resize(bytearray, n + 1) < 0))
                return -1;
            PyByteArray_AS_STRING(bytearray)[n] = value;
            return 0;
        }
    } else {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)");
        return -1;
    }
#endif
    pyval = PyInt_FromLong(value);
    if (unlikely(!pyval))
        return -1;
    retval = __Pyx_PyObject_CallMethod1(bytearray, __pyx_n_s_append, pyval);
    Py_DECREF(pyval);
    if (unlikely(!retval))
        return -1;
    Py_DECREF(retval);
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) ((uint8_t) 0 - (uint8_t) 1), const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
    const uint8_t neg_one = (uint8_t) ((uint8_t) 0 - (uint8_t) 1), const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 2 * PyLong_SHIFT) {
                            return (uint8_t) (((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 3 * PyLong_SHIFT) {
                            return (uint8_t) (((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 4 * PyLong_SHIFT) {
                            return (uint8_t) (((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) ((((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint8_t");
    return (uint8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint8_t");
    return (uint8_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
